@inject AppState AppState
@inject IManagePolls PollService
@inject IManageEvents EventService
@inject IJSRuntime JS
@implements IDisposable

<div>
    @if (!string.IsNullOrEmpty(@CurrentEvent.ImageUrl))
    {
        <div class="img-viewblock d-none d-sm-block" style="background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0), #121212FF), url(@CurrentEvent.ImageUrl);"></div>
        <div class="img-xs-viewblock d-block d-sm-none" style="background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0), #121212FF), url(@CurrentEvent.ImageUrl);"></div>
    }
    else
    {
        <div class="noimg-viewblock d-none d-sm-block"></div>
        <div class="noimg-xs-viewblock d-block d-sm-none"></div>
    }

    <div class="event-titleblock">
        <div class="">
            <div class="event-title">@CurrentEvent.Title</div>
            <div class="event-details">@CurrentEvent.Description</div>
        </div>
        @if (UserCanModifyEvent())
        {
            <div class="event-view-btnblock align-middle d-none d-sm-block">
                <button class="btn btn-outline-primary" @onclick="() => EditEvent()">
                    <span class="oi oi-pencil"></span>
                    &nbsp;Edit
                </button>
                <button class="btn btn-outline-info" @onclick="() => DeleteEvent()">
                    <span class="oi oi-trash"></span>
                </button>
            </div>

            <div class="d-block d-sm-none">
                <button class="btn btn-outline-primary" style="padding:0; min-width: 4rem;" @onclick="() => EditEvent()">
                    <span class="oi oi-pencil"></span>
                    Edit
                </button>
                <button class="btn btn-outline-info" style="padding:0; min-width: 3rem;" @onclick="() => DeleteEvent()">
                    <span class="oi oi-trash"></span>
                </button>
            </div>
        }
    </div>

    <div class="row">

        <div class="col-md-6">
            <div class="default-block">
                <h4>Date and time</h4>
                @if (@CurrentEvent.DateStatus == EventDateStatus.Locked)
                {
                    <div class="row" style="margin-top: .6rem;">
                        <div class="col-12 col-sm-10 col-md-12 col-lg-10 col-xl-8 dateview-container">
                            <div class="d-inline dateview-date">
                                @CurrentEvent.EventDate.Value.ToString("ddd, dd MMM"): @CurrentEvent.EventDate.Value.ToString("HH:mm") - @CurrentEvent.EventDateTo.Value.ToString("HH:mm")
                            </div>

                            @if (UserCanModifyEvent())
                            {
                                <button class="btn btn-sm btn-outline-secondary dateview-lock-btn" @onclick="(() => UnlockDate())"><span class="oi oi-lock-locked" /></button>
                            }
                        </div>
                    </div>
                    <div class="d-flex">
                        <div style="margin: .2rem;">
                            <a class="btn btn-sm btn-outline-secondary sometext-btn" href=@GoogleCalEntry target="_blank">Add to Google calendar</a>
                        </div>
                        <div style="margin: .2rem;">
                            <button class="btn btn-sm btn-outline-secondary sometext-btn" @onclick="(() => CallDownload())">Download calendar .ics</button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="bold">Date selection:</div>
                    @foreach (var date in CurrentEvent.ProposedDates)
                    {
                        <div class="row" style="margin-top: .6rem;">

                            <div class="col-12">
                                <div class="datevote-progress @DatevoteElementSelected(date) d-flex">
                                    <div class="datevote-element d-flex" @onclick="(() => VoteDate(date))">
                                        <div class="check-container" style="position:relative; margin-left: .5rem;">
                                            <input type="checkbox" style="margin-top:.8rem; " checked=@(DateVoted(date)) />
                                            <span class="checkmark" />
                                        </div>

                                        <div class="d-flex flex-nowrap justify-content-between" style="width:100%; margin-right: 1rem; ">
                                            <div style="padding:.8rem 0 .8rem 0;">
                                                @date.Date.ToString("ddd, dd MMM")
                                            </div>
                                            <div style="padding:.8rem 0 .8rem 0;">
                                                @date.Date.ToString("HH:mm") - @date.DateTo.ToString("HH:mm")
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                        </div>


                        @if (UserCanModifyEvent())
                        {
                            @*<div class="datevote-lock">*@
                                <button class="btn btn-sm btn-outline-secondary datevote-lock-btn" @onclick="(() => LockDate(date))"><span class="oi oi-lock-unlocked" /></button>
                            @*</div>*@
                        }
                        @foreach (var vote in date.Votes)
                        {
                            <span class="user-circle user-date-voted" title="@vote.Name">@vote.Name.First()</span>
                        }
                    }
                }
            </div>

            <div class="default-block">
                <h4>Location: </h4>
                <div>@CurrentEvent.Where</div>
            </div>
        </div>

        <div class="col-md-6">
            @if (UserCanModifyEvent())
            {
                <EventInvite CurrentEvent=@CurrentEvent />
            }
        </div>

        @if (CurrentEvent.Polls != null)
        {
            @foreach (var poll in CurrentEvent.Polls)
            {
                <div class="col-md-6">
                    <div class="default-block">
                        <div class="d-flex justify-content-between">
                            <h4>Poll</h4>
                            @*@if (AlreadyVotedPoll(poll))
                                {
                                <button class="btn btn-link" @onclick=@(() => ResetAnswers(poll))>Reset answer</button>
                                }*@
                        </div>

                        <div class="bold">@poll.Question</div>


                        @foreach (var choice in poll.Choices)
                        {
                            <div class="d-flex poll-main" @onclick="(() => Vote(poll, choice))">
                                @if (poll.MultiChoice)
                                {
                                    <div class="check-container">
                                        <input type="checkbox" checked=@(VotedChoice(choice)) @onchange="(() => Vote(poll, choice))" style="margin-top:.7rem;" />
                                        <span class="checkmark" />
                                    </div>
                                }
                                else
                                {
                                    <div class="radio-container">
                                        <input class="" type="radio" name=@poll.Question checked=@(VotedChoice(choice)) @onchange="(() => Vote(poll, choice))" style="margin-top:.7rem;" />
                                        <span class="radiomark" />
                                    </div>
                                }

                                <div class="poll-choice-container">
                                    <div class="poll-choice">@choice.Choice</div>
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" style="width: @Percent(poll, choice)%;" aria-valuenow="@Percent(poll, choice)" aria-valuemin="0" aria-valuemax="100">
                                        </div>
                                    </div>
                                </div>
                                <div class="poll-percent">
                                    @if (ChoiceTotalVotes(choice) > 0)
                                    {
                                        <span>@Percent(poll, choice)% (@ChoiceTotalVotes(choice))</span>
                                    }
                                </div>
                            </div>
                        }

                    </div>
                </div>
            }
        }
        <div class="col-md-6">
            <ChatComponent CurrentEvent=@CurrentEvent />
        </div>
        <div class="col-md-6">
            <EventParticipants CurrentEvent=@CurrentEvent />
            <EventRespond CurrentEvent=@CurrentEvent UserId=@AppState.UserId />
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public EventVM CurrentEvent { get; set; }
    [Parameter] public EventCallback SwitchToEdit { get; set; }
    string GoogleCalEntry => $"https://calendar.google.com/calendar/r/eventedit?text={GoogleCalTitle}&dates={GoogleCalDateFrom}/{GoogleCalDateTo}&details={GoogleCalDetails ?? string.Empty}&location={GoogleCalLocation ?? string.Empty}";
    string GoogleCalTitle => $"{CurrentEvent.Title.CalSlugify()}";
    string GoogleCalDateFrom => $"{CurrentEvent.EventDate.Value.ToString("yyyyMMddTHHmm00Z")}";
    string GoogleCalDateTo => $"{CurrentEvent.EventDateTo.Value.ToString("yyyyMMddTHHmm00Z")}";
    string GoogleCalDetails => $"{CurrentEvent.Description?.CalSlugify()} {Nav.BaseUri}Event/{CurrentEvent.Id}";
    string GoogleCalLocation => $"{CurrentEvent.Where?.CalSlugify()}";
    string CalendarIcsLink => $"{Nav.BaseUri}Events/ClendarFile";

    string DatevoteElementSelected(ProposedDateVM date)
        => date.Votes.Any(o => o.UserId == AppState.UserId)
                    ? "datevote-element-selected" : string.Empty;

    async Task CallDownload()
    {
        await JS.InvokeVoidAsync("DownloadFile", "event.ics", "text/calendar", CurrentEvent.CalendarFile(Nav.BaseUri));
    }

    async Task Vote(PollVM poll, PollChoiceVM choice)
    {
        await PollService.Vote(poll, choice);
    }

    async Task ResetAnswers(PollVM poll)
    {
        await PollService.ResetAnswers(poll);
        //StateHasChanged();
    }

    int Percent(PollVM poll, PollChoiceVM choice)
    {
        var totalVotes = PollTotalVotes(poll);
        return totalVotes > 0
                ? ChoiceTotalVotes(choice) * (100 / totalVotes)
                : 0;
    }

    bool VotedChoice(PollChoiceVM choice)
    {
        var result = choice.Answers.Any(c => c.UserId == AppState.UserId);
        return result;
    }

    int PollTotalVotes(PollVM poll)
        => poll.Choices.Sum(o => o.Answers?.Count()) ?? 0;

    int ChoiceTotalVotes(PollChoiceVM choice)
        => choice.Answers?.Count() ?? 0;

    bool AlreadyVotedChoice(PollVM poll, PollChoiceVM choice)
        => poll.MultiChoice
                ? choice.Answers.Any(a => a.UserId == AppState.UserId)
                : AlreadyVotedPoll(poll);

    bool AlreadyVotedPoll(PollVM poll)
        => poll.Choices.Any(c => c.Answers.Any(a => a.UserId == AppState.UserId));

    bool UserCanModifyEvent()
        => (CurrentEvent.CreatedById == AppState.UserId);

    async Task VoteDate(ProposedDateVM date)
    {
        date.EventId = CurrentEvent.Id.Value;
        await PollService.VoteDate(date);
    }

    bool DateVoted(ProposedDateVM date)
    {
        return date.Votes.Any(o => o.UserId == AppState.UserId);
    }

    int PercentDate(ProposedDateVM date)
    {
        var totalVotes = CurrentEvent.ProposedDates.Sum(o => o.Votes?.Count()) ?? 0;
        return totalVotes > 0
                ? ChoiceTotalVotesDate(date) * (100 / totalVotes)
                : 0;
    }

    void LockDate(ProposedDateVM date)
    {
        CurrentEvent.EventDate = date.Date;
        CurrentEvent.EventDateTo = date.DateTo;
        CurrentEvent.DateStatus = EventDateStatus.Locked;
        date.EventId = CurrentEvent.Id;
        PollService.LockDate(date);
    }

    void UnlockDate()
    {
        var date = new ProposedDateVM() { Date = CurrentEvent.EventDate.Value, DateTo = CurrentEvent.EventDateTo.Value, EventId = CurrentEvent.Id };
        CurrentEvent.EventDate = null;
        CurrentEvent.EventDateTo = null;
        CurrentEvent.DateStatus = EventDateStatus.Voting;
        PollService.UnlockDate(date);
    }

    int ChoiceTotalVotesDate(ProposedDateVM date)
        => date.Votes?.Count() ?? 0;


    async Task EditEvent()
    {
        await SwitchToEdit.InvokeAsync();
    }

    async Task DeleteEvent()
    {
        var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
        var parameters = new ModalParameters();
        parameters.Add("Message", "Are you sure about deleting this event? Other participants will be notified.\nYou can not undo this.");
        var modal = Modal.Show<ConfirmModal>("Delete this event?", parameters, options);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            await EventService.Delete(CurrentEvent.Id.Value);
            Nav.NavigateTo("/");
        }
    }

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}

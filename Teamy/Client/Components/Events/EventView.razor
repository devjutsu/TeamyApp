@inject AppState AppState
@inject IManagePolls PollService
@inject IManageEvents EventService
@implements IDisposable

<div>
    <div class="d-flex justify-content-between">
        <div>
            <h4>@CurrentEvent.Title</h4>
            <div><span style="font-weight:bold;">Details: </span>@CurrentEvent.Description</div>
            <p></p>
            @* add different logic: if one event then no voting. *@
            @if (@CurrentEvent.DateStatus == EventDateStatus.Locked)
            {
                @if (UserCanModifyEvent())
                {
                    <button class="btn btn-outline-secondary d-inline" @onclick="(() => UnlockDate())"><span class="oi oi-lock-locked" /></button>
                }
                <div class="d-inline"> @CurrentEvent.EventDate.Value.ToLongDateString()</div>
                <div>
                    <a href=@GoogleCalEntry target="_blank">Add to Google Calendar</a>
                </div>
            }
            else
            {
                <div style="margin:1rem 0 1rem 0; padding: 1rem; border: 1px dotted black; max-width: 30rem;">
                    <div style="font-weight:bold;">Date selection:</div>
                    @foreach (var date in CurrentEvent.ProposedDates)
                    {
                        @if (UserCanModifyEvent())
                        {
                            <button class="btn btn-outline-secondary" @onclick="(() => LockDate(date))"><span class="oi oi-lock-unlocked" /></button>
                        }
                        <button class="btn btn-link form-check form-check-inline" @onclick="(() => VoteDate(date))" disabled=@CanNotVoteDate(date)>@date.Date.ToLongDateString()</button>

                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: @PercentDate(date)%;" aria-valuenow="@PercentDate(date)" aria-valuemin="0" aria-valuemax="100">
                                @if (ChoiceTotalVotesDate(date) > 0)
                                {
                                    <span>@PercentDate(date)% (@ChoiceTotalVotesDate(date))</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            <div><span style="font-weight:bold;">Location: </span>@CurrentEvent.Where</div>
        </div>

        <div><img src=@CurrentEvent.ImageUrl width="400" /></div>
    </div>

    <p>&nbsp;</p>
    <div class="d-flex flex-wrap" style="width:100%; padding:0;">
        <div class="flex-fill">
            <h5>Polls</h5>
            @if (CurrentEvent.Polls != null)
            {
                @foreach (var poll in CurrentEvent.Polls)
                {
                    <div style="margin:1rem 0 1rem 0; margin-right:1rem; padding: 1rem; border: 1px dotted black; max-width: 30rem;">
                        <div style="font-weight:bold;">@poll.Question</div>
                        @if (AlreadyVotedPoll(poll))
                        {
                            <button class="btn btn-link float-end" @onclick=@(() => ResetAnswers(poll))>Reset answer</button>
                        }

                        @foreach (var choice in poll.Choices)
                        {
                            @*@if (poll.MultiChoice)
                                {
                                <input type="checkbox" class="form-check-input" style="margin-top:.7rem;" @bind="() => hz(poll, choice)" />
                                }
                                else
                                {
                                <input type="radio" name=@poll.Question class="form-check-input" id=@choice.Id style="margin-top:.7rem;" />
                                }*@
                            <button class="btn btn-link" @onclick="(() => Vote(poll, choice))" disabled=@CanNotVote(poll, choice)>@choice.Choice</button>

                            <div class="progress">
                                <div class="progress-bar" role="progressbar" style="width: @Percent(poll, choice)%;" aria-valuenow="@Percent(poll, choice)" aria-valuemin="0" aria-valuemax="100">
                                    @if (ChoiceTotalVotes(choice) > 0)
                                    {
                                        <span>@Percent(poll, choice)% (@ChoiceTotalVotes(choice))</span>
                                    }
                                </div>
                            </div>
                        }
                        @*@if (poll.FreeTextOption)
                            {
                            <div class="input-group" style="margin-top:1rem;">
                            @if (poll.MultiChoice)
                            {
                            <div class="form-check form-check-inline" style="margin-top:.3rem; margin-right:0;">
                            <input class="form-check-input" type="checkbox" value="option1">
                            </div>
                            }
                            else
                            {
                            <input type="radio" class="form-check-input" style="margin-top:.6rem;" />
                            }

                            <input type="text" class="form-control" style="border-radius:5px; ">
                            <div class="">
                            <button class="btn btn-outline-secondary" type="button">
                            <span class="oi oi-minus" />
                            </button>
                            </div>
                            </div>
                            }*@
                    </div>
                }
            }
        </div>
        <div style="min-width:50%;">
            <h5>Chat</h5>
            <ChatComponent CurrentEvent=@CurrentEvent />
        </div>
    </div>

    <EventParticipants CurrentEvent=@CurrentEvent />
    <EventRespond CurrentEvent=@CurrentEvent UserId=@AppState.UserId />

    @if (UserCanModifyEvent())
    {
        <EventInvite CurrentEvent=@CurrentEvent />
    }
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public EventVM CurrentEvent { get; set; }
    string GoogleCalEntry => $"https://calendar.google.com/calendar/r/eventedit?text={GoogleCalTitle}&dates={GoogleCalDateFrom}/{GoogleCalDateTo}&details={GoogleCalDetails}&location={GoogleCalLocation}";
    string GoogleCalTitle => $"{CurrentEvent.Title.CalSlugify()}";
    string GoogleCalDateFrom => $"{CurrentEvent.EventDate.Value.ToString("yyyyMMddTHHmm00Z")}";
    string GoogleCalDateTo => $"{CurrentEvent.EventDate.Value.AddHours(2).ToString("yyyyMMddTHHmm00Z")}";
    string GoogleCalDetails => $"{CurrentEvent.Description.CalSlugify()} {Nav.BaseUri}Event/{CurrentEvent.Id}";
    string GoogleCalLocation => $"{CurrentEvent.Where.CalSlugify()}";

    async Task Vote(PollVM poll, PollChoiceVM choice)
    {
        await PollService.Vote(poll, choice);
    }

    async Task ResetAnswers(PollVM poll)
        => await PollService.ResetAnswers(poll);

    int Percent(PollVM poll, PollChoiceVM choice)
    {
        var totalVotes = PollTotalVotes(poll);
        return totalVotes > 0
                ? ChoiceTotalVotes(choice) * (100 / totalVotes)
                : 0;
    }

    int PollTotalVotes(PollVM poll)
        => poll.Choices.Sum(o => o.Answers?.Count()) ?? 0;

    int ChoiceTotalVotes(PollChoiceVM choice)
        => choice.Answers?.Count() ?? 0;

    bool AlreadyVotedChoice(PollVM poll, PollChoiceVM choice)
        => poll.MultiChoice
                ? choice.Answers.Any(a => a.UserId == AppState.UserId)
                : AlreadyVotedPoll(poll);

    bool AlreadyVotedPoll(PollVM poll)
        => poll.Choices.Any(c => c.Answers.Any(a => a.UserId == AppState.UserId));

    bool UserCanModifyEvent()
        => (CurrentEvent.CreatedById == AppState.UserId);

    bool CanNotVote(PollVM poll, PollChoiceVM choice)
    {
        var currentUserId = AppState.UserId;
        if (CurrentEvent.CreatedById == currentUserId)
        {
            return AlreadyVotedChoice(poll, choice);
        }

        var currentUserParticipation = CurrentEvent.Participants.FirstOrDefault(o => o.UserId == currentUserId)?.Status;
        if (currentUserParticipation == ParticipationStatus.Accept)
        {
            return AlreadyVotedChoice(poll, choice);
        }

        return true;
    }

    async Task VoteDate(ProposedDateVM date)
    {
        date.EventId = CurrentEvent.Id.Value;
        await PollService.VoteDate(date);
    }

    bool CanNotVoteDate(ProposedDateVM date)
    {
        return false;
    }

    int PercentDate(ProposedDateVM date)
    {
        var totalVotes = CurrentEvent.ProposedDates.Sum(o => o.Votes?.Count()) ?? 0;
        return totalVotes > 0
                ? ChoiceTotalVotesDate(date) * (100 / totalVotes)
                : 0;
    }

    void LockDate(ProposedDateVM date)
    {
        CurrentEvent.EventDate = date.Date;
        CurrentEvent.DateStatus = EventDateStatus.Locked;
        date.EventId = CurrentEvent.Id;
        PollService.LockDate(date);
    }

    void UnlockDate()
    {
        var date = new ProposedDateVM() { Date = CurrentEvent.EventDate.Value, EventId = CurrentEvent.Id };
        CurrentEvent.EventDate = null;
        CurrentEvent.DateStatus = EventDateStatus.Voting;
        PollService.UnlockDate(date);
    }

    int ChoiceTotalVotesDate(ProposedDateVM date)
        => date.Votes?.Count() ?? 0;

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}

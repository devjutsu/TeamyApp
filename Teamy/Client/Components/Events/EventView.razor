@inject AppState AppState
@inject IManagePolls PollService
@inject IManageEvents EventService
@inject IJSRuntime JS
@implements IDisposable

<div>
    <img src=@CurrentEvent.ImageUrl />

    <div class="d-flex flex-wrap" style="width:100%; padding:0;">
        <div class="dummy-block">
            <h4>@CurrentEvent.Title</h4>
            <div><span style="font-weight:bold;">Details: </span>@CurrentEvent.Description</div>
        </div>

        <div class="dummy-block">
            <h4>Date and time</h4>
            @if (@CurrentEvent.DateStatus == EventDateStatus.Locked)
            {
                @if (UserCanModifyEvent())
                {
                    <button class="btn btn-sm btn-outline-secondary d-inline btn-sm-lock" @onclick="(() => UnlockDate())"><span class="oi oi-lock-locked" /></button>
                }
                <div class="d-inline" style="margin-left:1rem;">@CurrentEvent.EventDate.Value.ToShortDateString() @CurrentEvent.EventDate.Value.ToShortTimeString() - @CurrentEvent.EventDateTo.Value.ToShortTimeString()</div>
                <div>
                    <a class="btn btn-link" href=@GoogleCalEntry target="_blank">Add to Google calendar</a>
                </div>
                <div>
                    <button class="btn btn-link" @onclick="(() => CallDownload())">Download calendar .ics</button>
                </div>
            }
            else
            {
                <div style="font-weight:bold;">Date selection:</div>
                @foreach (var date in CurrentEvent.ProposedDates)
                {
                    @if (UserCanModifyEvent())
                    {
                        <button class="btn btn-sm btn-outline-secondary btn-sm-lock" @onclick="(() => LockDate(date))"><span class="oi oi-lock-unlocked" /></button>
                    }
                    <button class="btn btn-link form-check form-check-inline" @onclick="(() => VoteDate(date))" disabled=@CanNotVoteDate(date)>@date.Date.ToShortDateString() @date.Date.ToShortTimeString() - @date.DateTo.ToShortTimeString()</button>

                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: @PercentDate(date)%;" aria-valuenow="@PercentDate(date)" aria-valuemin="0" aria-valuemax="100">
                            @if (ChoiceTotalVotesDate(date) > 0)
                            {
                                <span>@PercentDate(date)% (@ChoiceTotalVotesDate(date))</span>
                            }
                        </div>
                    </div>
                }
            }
        </div>

        <div class="dummy-block">
            <h4>Location: </h4>
            <div>@CurrentEvent.Where</div>
        </div>

        @if (UserCanModifyEvent())
        {
            <div style="margin:1rem 1rem 1rem 0;">
                <button class="btn btn-warning" @onclick="() => EditEvent()">Edit</button>
                <button class="btn btn-danger" @onclick="() => DeleteEvent()">Delete</button>
                <p>&nbsp;</p>
            </div>
        }

        @if (UserCanModifyEvent())
        {
            <EventInvite CurrentEvent=@CurrentEvent />
        }


        @if (CurrentEvent.Polls != null)
        {
            @foreach (var poll in CurrentEvent.Polls)
            {
                <div class="dummy-block">
                    <h4>Poll</h4>
                    <div style="font-weight:bold;">@poll.Question</div>
                    @if (AlreadyVotedPoll(poll))
                    {
                        <button class="btn btn-link float-end" @onclick=@(() => ResetAnswers(poll))>Reset answer</button>
                    }

                    @foreach (var choice in poll.Choices)
                    {
                        @if (poll.MultiChoice)
                        {
                            <input type="checkbox" class="form-check-input" checked=@(VotedChoice(choice)) disabled=@CanNotVote(poll, choice) @onchange="(() => Vote(poll, choice))" style="margin-top:.7rem;" />
                        }
                        else
                        {
                            <input type="radio" name=@poll.Question class="form-check-input" checked=@(VotedChoice(choice)) @onchange="(() => Vote(poll, choice))" disabled=@CanNotVote(poll, choice) style="margin-top:.7rem;" />
                        }
                        <button class="btn btn-link" @onclick="(() => Vote(poll, choice))" disabled=@CanNotVote(poll, choice)>@choice.Choice</button>

                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: @Percent(poll, choice)%;" aria-valuenow="@Percent(poll, choice)" aria-valuemin="0" aria-valuemax="100">
                                @if (ChoiceTotalVotes(choice) > 0)
                                {
                                    <span>@Percent(poll, choice)% (@ChoiceTotalVotes(choice))</span>
                                }
                            </div>
                        </div>
                    }
                    @*@if (poll.FreeTextOption)
                        {
                        <div class="input-group" style="margin-top:1rem;">
                        @if (poll.MultiChoice)
                        {
                        <div class="form-check form-check-inline" style="margin-top:.3rem; margin-right:0;">
                        <input class="form-check-input" type="checkbox" value="option1">
                        </div>
                        }
                        else
                        {
                        <input type="radio" class="form-check-input" style="margin-top:.6rem;" />
                        }

                        <input type="text" class="form-control" style="border-radius:5px; ">
                        <div class="">
                        <button class="btn btn-outline-secondary" type="button">
                        <span class="oi oi-minus" />
                        </button>
                        </div>
                        </div>
                        }*@
                </div>
            }
        }
        <ChatComponent CurrentEvent=@CurrentEvent />
        <EventParticipants CurrentEvent=@CurrentEvent />
        <EventRespond CurrentEvent=@CurrentEvent UserId=@AppState.UserId />
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public EventVM CurrentEvent { get; set; }
    [Parameter] public EventCallback SwitchToEdit { get; set; }
    string GoogleCalEntry => $"https://calendar.google.com/calendar/r/eventedit?text={GoogleCalTitle}&dates={GoogleCalDateFrom}/{GoogleCalDateTo}&details={GoogleCalDetails ?? string.Empty}&location={GoogleCalLocation ?? string.Empty}";
    string GoogleCalTitle => $"{CurrentEvent.Title.CalSlugify()}";
    string GoogleCalDateFrom => $"{CurrentEvent.EventDate.Value.ToString("yyyyMMddTHHmm00Z")}";
    string GoogleCalDateTo => $"{CurrentEvent.EventDateTo.Value.ToString("yyyyMMddTHHmm00Z")}";
    string GoogleCalDetails => $"{CurrentEvent.Description?.CalSlugify()} {Nav.BaseUri}Event/{CurrentEvent.Id}";
    string GoogleCalLocation => $"{CurrentEvent.Where?.CalSlugify()}";
    string CalendarIcsLink => $"{Nav.BaseUri}Events/ClendarFile";

    async Task CallDownload()
    {
        await JS.InvokeVoidAsync("DownloadFile", "event.ics", "text/calendar", CurrentEvent.CalendarFile(Nav.BaseUri));
    }

    async Task Vote(PollVM poll, PollChoiceVM choice)
    {
        await PollService.Vote(poll, choice);
    }

    async Task ResetAnswers(PollVM poll)
    {
        await PollService.ResetAnswers(poll);
        //StateHasChanged();
    }

    int Percent(PollVM poll, PollChoiceVM choice)
    {
        var totalVotes = PollTotalVotes(poll);
        return totalVotes > 0
                ? ChoiceTotalVotes(choice) * (100 / totalVotes)
                : 0;
    }

    bool VotedChoice(PollChoiceVM choice)
    {
        var result = choice.Answers.Any(c => c.UserId == AppState.UserId);
        return result;
    }

    int PollTotalVotes(PollVM poll)
        => poll.Choices.Sum(o => o.Answers?.Count()) ?? 0;

    int ChoiceTotalVotes(PollChoiceVM choice)
        => choice.Answers?.Count() ?? 0;

    bool AlreadyVotedChoice(PollVM poll, PollChoiceVM choice)
        => poll.MultiChoice
                ? choice.Answers.Any(a => a.UserId == AppState.UserId)
                : AlreadyVotedPoll(poll);

    bool AlreadyVotedPoll(PollVM poll)
        => poll.Choices.Any(c => c.Answers.Any(a => a.UserId == AppState.UserId));

    bool UserCanModifyEvent()
        => (CurrentEvent.CreatedById == AppState.UserId);

    bool CanNotVote(PollVM poll, PollChoiceVM choice)
    {
        var currentUserId = AppState.UserId;
        if (CurrentEvent.CreatedById == currentUserId)
        {
            return AlreadyVotedChoice(poll, choice);
        }

        var currentUserParticipation = CurrentEvent.Participants.FirstOrDefault(o => o.UserId == currentUserId)?.Status;
        if (currentUserParticipation == ParticipationStatus.Accept)
        {
            return AlreadyVotedChoice(poll, choice);
        }

        return true;
    }

    async Task VoteDate(ProposedDateVM date)
    {
        date.EventId = CurrentEvent.Id.Value;
        await PollService.VoteDate(date);
    }

    bool CanNotVoteDate(ProposedDateVM date)
    {
        return false;
    }

    int PercentDate(ProposedDateVM date)
    {
        var totalVotes = CurrentEvent.ProposedDates.Sum(o => o.Votes?.Count()) ?? 0;
        return totalVotes > 0
                ? ChoiceTotalVotesDate(date) * (100 / totalVotes)
                : 0;
    }

    void LockDate(ProposedDateVM date)
    {
        CurrentEvent.EventDate = date.Date;
        CurrentEvent.EventDateTo = date.DateTo;
        CurrentEvent.DateStatus = EventDateStatus.Locked;
        date.EventId = CurrentEvent.Id;
        PollService.LockDate(date);
    }

    void UnlockDate()
    {
        var date = new ProposedDateVM() { Date = CurrentEvent.EventDate.Value, DateTo = CurrentEvent.EventDateTo.Value, EventId = CurrentEvent.Id };
        CurrentEvent.EventDate = null;
        CurrentEvent.EventDateTo = null;
        CurrentEvent.DateStatus = EventDateStatus.Voting;
        PollService.UnlockDate(date);
    }

    int ChoiceTotalVotesDate(ProposedDateVM date)
        => date.Votes?.Count() ?? 0;


    async Task EditEvent()
    {
        await SwitchToEdit.InvokeAsync();
    }

    async Task DeleteEvent()
    {
        var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
        var parameters = new ModalParameters();
        parameters.Add("Message", "Are you sure about deleting this event? Other participants will be notified.\nYou can not undo this.");
        var modal = Modal.Show<ConfirmModal>("Delete this event?", parameters, options);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            await EventService.Delete(CurrentEvent.Id.Value);
            Nav.NavigateTo("/");
        }
    }

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}

@using Microsoft.AspNetCore.SignalR.Client
@inject AppState AppState
@inject IManagePolls PollService
@inject IManageEvents EventService
@implements IDisposable

<div>
    <div class="d-flex justify-content-between">
        <div>
            <h4>@Evt.Title</h4>
            <div>@Evt.When.ToLongDateString()</div>
            <div>@Evt.Description</div>
        </div>
        <div><img src=@Evt.ImageUrl width="400" /></div>
    </div>

    <h5>Polls</h5>
    @if (Evt.Polls != null)
    {
        @foreach (var poll in Evt.Polls)
        {
            <div style="margin:1rem 0 1rem 0; padding: 1rem; border: 1px dotted black; max-width: 30rem;">
                <div style="font-weight:bold;">@poll.Question</div>

                @foreach (var choice in poll.Choices)
                {
                    @if (poll.MultiChoice)
                    {
                        <input type="checkbox" class="form-check-input" style="margin-top:.7rem;" />
                    }
                    else
                    {
                        <input type="radio" name=@poll.Question class="form-check-input" id=@choice.Id style="margin-top:.7rem;" />
                    }
                    <button class="btn btn-link" @onclick="(() => Vote(poll, choice))">@choice.Choice</button>
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: @Percent(poll, choice)%;" aria-valuenow="@Percent(poll, choice)" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                }
                @*@if (poll.FreeTextOption)
                    {
                    <div class="input-group" style="margin-top:1rem;">
                    @if (poll.MultiChoice)
                    {
                    <div class="form-check form-check-inline" style="margin-top:.3rem; margin-right:0;">
                    <input class="form-check-input" type="checkbox" value="option1">
                    </div>
                    }
                    else
                    {
                    <input type="radio" class="form-check-input" style="margin-top:.6rem;" />
                    }

                    <input type="text" class="form-control" style="border-radius:5px; ">
                    <div class="">
                    <button class="btn btn-outline-secondary" type="button">
                    <span class="oi oi-minus" />
                    </button>
                    </div>
                    </div>
                    }*@

            </div>
        }
    }

    <p>&nbsp;</p>
    <h5>Participation</h5>
    <div>@Evt.CreatedByName - Creator</div>
    @foreach (var participant in Evt.Participants)
    {
        <div>@participant.Name - @participant.Status.ToString()</div>
    }
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public EventVM Evt { get; set; }
    HubConnection _hub;

    protected override async Task OnInitializedAsync()
    {
        _hub = new HubConnectionBuilder()
                .WithUrl(Nav.BaseUri + "votehub")
                .WithAutomaticReconnect()
                .Build();

        await _hub.StartAsync();

        _hub.On<Guid>("EventUpdated", async (changedEventId) =>
        {
            if (changedEventId == Evt.Id)
            {
                Evt = await EventService.Get(Evt.Id.Value);
                StateHasChanged();
            }
        });

        _hub.On<Guid>("EventDeleted", async (changedEventId) =>
            {
                if (changedEventId == Evt.Id)
                {
                    var options = new ModalOptions() { Class = "default-modal" };
                    var parameters = new ModalParameters();
                    parameters.Add("Message", "This event was deleted!");
                    var messageModal = Modal.Show<NotifyModal>("Information", parameters, options);
                    var result = await messageModal.Result;
                    Nav.NavigateTo("");
                }
            });
    }

    async Task Vote(PollVM poll, PollChoiceVM choice)
    {
        await PollService.Vote(poll, choice);
    }

    int Percent(PollVM poll, PollChoiceVM choice)
    {
        var voted = poll.Choices.Sum(o => o.Answers?.Count()) ?? 0;
        return voted > 0 ? (choice.Answers?.Count() ?? 0) * (100 / voted)  : 0;;
    }

    void RemoveFreeChoice(PollVM poll)
    {

    }

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}

@using Microsoft.AspNetCore.SignalR.Client
@inject AppState AppState
@inject IManagePolls PollService
@inject IManageEvents EventService
@implements IDisposable

<div>
    <div class="d-flex justify-content-between">
        <div>
            <h4>@CurrentEvent.Title</h4>
            <div>@CurrentEvent.When.ToLongDateString()</div>
            <div>@CurrentEvent.Description</div>
            <div>
                <button class="btn btn-warning" @onclick="() => EditEvent()">Edit event</button>
            </div>
        </div>
        <div><img src=@CurrentEvent.ImageUrl width="400" /></div>
    </div>


    <h5>Polls</h5>
    @if (CurrentEvent.Polls != null)
    {
        @foreach (var poll in CurrentEvent.Polls)
        {
            <div style="margin:1rem 0 1rem 0; padding: 1rem; border: 1px dotted black; max-width: 30rem;">
                <div style="font-weight:bold;">@poll.Question</div>
                @if (AlreadyVotedPoll(poll))
                {
                    <button class="btn btn-link float-end" @onclick=@(() => ResetAnswers(poll))>Reset answer</button>
                }

                @foreach (var choice in poll.Choices)
                {
                    @*@if (poll.MultiChoice)
                        {
                        <input type="checkbox" class="form-check-input" style="margin-top:.7rem;" @bind="() => hz(poll, choice)" />
                        }
                        else
                        {
                        <input type="radio" name=@poll.Question class="form-check-input" id=@choice.Id style="margin-top:.7rem;" />
                        }*@
                    <button class="btn btn-link" @onclick="(() => Vote(poll, choice))" disabled=@CanNotVote(poll, choice)>@choice.Choice</button>

                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: @Percent(poll, choice)%;" aria-valuenow="@Percent(poll, choice)" aria-valuemin="0" aria-valuemax="100">
                            @if (ChoiceTotalVotes(choice) > 0)
                            {
                                <span>@Percent(poll, choice)% (@ChoiceTotalVotes(choice))</span>
                            }
                        </div>
                    </div>
                }
                @*@if (poll.FreeTextOption)
                    {
                    <div class="input-group" style="margin-top:1rem;">
                    @if (poll.MultiChoice)
                    {
                    <div class="form-check form-check-inline" style="margin-top:.3rem; margin-right:0;">
                    <input class="form-check-input" type="checkbox" value="option1">
                    </div>
                    }
                    else
                    {
                    <input type="radio" class="form-check-input" style="margin-top:.6rem;" />
                    }

                    <input type="text" class="form-control" style="border-radius:5px; ">
                    <div class="">
                    <button class="btn btn-outline-secondary" type="button">
                    <span class="oi oi-minus" />
                    </button>
                    </div>
                    </div>
                    }*@
            </div>
        }
    }

    <EventParticipants CurrentEvent=@CurrentEvent />
    <EventRespond CurrentEvent=@CurrentEvent UserId=@AppState.UserId />

    @if (UserCanModifyEvent())
    {
        <EventInvite CurrentEvent=@CurrentEvent />
    }


</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public EventVM CurrentEvent { get; set; }
    HubConnection _hub;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(string.Join(", ", CurrentEvent.Participants.Where(o => o.Status == ParticipationStatus.Accept).Select(o => o.Name)));

        _hub = new HubConnectionBuilder()
                .WithUrl(Nav.BaseUri + "votehub")
                .WithAutomaticReconnect()
                .Build();

        await _hub.StartAsync();

        _hub.On<Guid>("EventUpdated", async (changedEventId) =>
        {
            if (changedEventId == CurrentEvent.Id)
            {
                CurrentEvent = await EventService.Get(CurrentEvent.Id.Value);
                StateHasChanged();
            }
        });

        _hub.On<Guid>("EventDeleted", async (changedEventId) =>
        {
            if (changedEventId == CurrentEvent.Id)
            {
                var options = new ModalOptions() { Class = "default-modal" };
                var parameters = new ModalParameters();
                parameters.Add("Message", "This event was deleted!");
                var messageModal = Modal.Show<NotifyModal>("Information", parameters, options);
                var result = await messageModal.Result;
                Nav.NavigateTo("");
            }
        });
    }

    async Task Vote(PollVM poll, PollChoiceVM choice)
    {
        await PollService.Vote(poll, choice);
    }

    async Task ResetAnswers(PollVM poll)
        => await PollService.ResetAnswers(poll);

    int Percent(PollVM poll, PollChoiceVM choice)
    {
        var totalVotes = PollTotalVotes(poll);
        return totalVotes > 0
                ? ChoiceTotalVotes(choice) * (100 / totalVotes)
                : 0;
    }

    int PollTotalVotes(PollVM poll)
        => poll.Choices.Sum(o => o.Answers?.Count()) ?? 0;

    int ChoiceTotalVotes(PollChoiceVM choice)
        => choice.Answers?.Count() ?? 0;

    bool AlreadyVotedChoice(PollVM poll, PollChoiceVM choice)
        => poll.MultiChoice
                ? choice.Answers.Any(a => a.UserId == AppState.UserId)
                : AlreadyVotedPoll(poll);

    bool AlreadyVotedPoll(PollVM poll)
        => poll.Choices.Any(c => c.Answers.Any(a => a.UserId == AppState.UserId));

    bool UserCanModifyEvent()
        => (CurrentEvent.CreatedById == AppState.UserId);

    bool CanNotVote(PollVM poll, PollChoiceVM choice)
    {
        var currentUserId = AppState.UserId;
        if (CurrentEvent.CreatedById == currentUserId)
        {
            return AlreadyVotedChoice(poll, choice);
        }

        var currentUserParticipation = CurrentEvent.Participants.FirstOrDefault(o => o.UserId == currentUserId)?.Status;
        if (currentUserParticipation == ParticipationStatus.Accept)
        {
            return AlreadyVotedChoice(poll, choice);
        }

        return true;
    }

    async Task EditEvent()
    {
        var options = new ModalOptions() { Class = "event-edit-modal" };
        var parameters = new ModalParameters();
        parameters.Add("Evt", CurrentEvent);

        var messageModal = Modal.Show<EventEditModal>("Edit event", parameters, options);
        var modalResult = await messageModal.Result;
        if(!modalResult.Cancelled)
        {
            var evt = (EventVM)modalResult.Data;
            var result = await EventService.Update(evt);
            CurrentEvent = await EventService.Get(Guid.Parse(result));
        }
    }

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}

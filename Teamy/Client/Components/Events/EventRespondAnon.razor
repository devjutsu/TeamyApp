@inject IManageInvites InviteService

@if (Participation() == ParticipationStatus.NotSet)
{
    <div class="dummy-block">
        <div>Are you coming?</div>
        <div class="form-inline">
            <button @onclick="() => Respond(accept:true)" class="btn btn-success">Yes</button>
            <button @onclick="() => Respond(accept:false)" class="btn btn-danger">No</button>
        </div>
    </div>
}
else
{
    @if (Participation() == ParticipationStatus.Accept)
    {
        <div class="dummy-block">
            <div>You're in!</div>
            <a href="#" @onclick="NavigateToLogin">Log in</a> or <a href="#" @onclick="NavigateToRegistration">Register</a> to confirm your answer!
        </div>

    }
    else if (Participation() == ParticipationStatus.Reject)
    {
        <div class="dummy-block">
            <div>You're not going :(</div>
            <a href="#" @onclick="NavigateToLogin">Log in</a> or <a href="#" @onclick="NavigateToRegistration">Register</a> to confirm your answer!
        </div>
    }
}


@code {
    [Parameter]
    public EventVM CurrentEvent { get; set; }
    [Parameter]
    public string InviteCode { get; set; }
    [Parameter]
    public EventCallback<ParticipationVM> Responded { get; set; }
    [Parameter]
    public ParticipationVM? LatestParticipation { get; set; }

    void NavigateToRegistration() => Nav.NavigateTo($"Identity/Account/Register?inviteResponse={LatestParticipation.Id}", forceLoad: true);
    void NavigateToLogin() => Nav.NavigateTo($"Identity/Account/Login?inviteResponse={LatestParticipation.Id}", forceLoad: true);

    ParticipationStatus Participation()
    {
        if (LatestParticipation == null)
            return ParticipationStatus.NotSet;
        else if (LatestParticipation.EventId != CurrentEvent.Id)
            return ParticipationStatus.NotSet;
        else
            return LatestParticipation.Status;
    }

    async Task Respond(bool accept)
    {
        var participation = await InviteService.RespondAnon(CurrentEvent.Id.Value, accept, "anonymous", InviteCode);
        await Responded.InvokeAsync(participation);
    }

    void ChangeResponse()
    {
        LatestParticipation = null;
    }
}

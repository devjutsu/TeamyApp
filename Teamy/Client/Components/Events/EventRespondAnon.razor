@inject IManageInvites InviteService
@inject IJSRuntime JS

@if (Participation() == ParticipationStatus.NotSet)
{
    <div class="dummy-block">
        <label>Your name:</label>
        <div><input class="form-control" @bind-value=@ParticipantName /></div>
        <div>Are you coming?</div>
        <div class="form-inline">
            <button @onclick="() => Respond(accept:true)" class="btn btn-success" disabled="@DisableRespond">Yes</button>
            <button @onclick="() => Respond(accept:false)" class="btn btn-danger" disabled="@DisableRespond">No</button>
        </div>
    </div>
}
else
{
    @if (Participation() == ParticipationStatus.Accept)
    {
        <div class="dummy-block">
            <div>You're in!</div>
            <button class="btn btn-link" @onclick="ChangeResponse">Change my response</button>
        </div>
    }
    else if (Participation() == ParticipationStatus.Reject)
    {
        <div class="dummy-block">
            <div>You're not going :(</div>
            <button class="btn btn-link" @onclick="ChangeResponse">Change attendance</button>
        </div>
    }
}


@code {
    [Parameter]
    public EventVM CurrentEvent { get; set; }
    [Parameter]
    public string InviteCode { get; set; }
    [Parameter]
    public EventCallback<ParticipationVM> Responded { get; set; }
    [Parameter]
    public ParticipationVM? LatestParticipation { get; set; }

    public string ParticipantName { get; set; } = "";

    bool DisableRespond => string.IsNullOrEmpty(ParticipantName);

    ParticipationStatus Participation()
    {
        if (LatestParticipation == null)
            return ParticipationStatus.NotSet;
        else if (LatestParticipation.EventId != CurrentEvent.Id)
            return ParticipationStatus.NotSet;
        else
            return LatestParticipation.Status;
    }

    protected override async Task OnInitializedAsync()
    {
        var cookieEventId = await JS.InvokeAsync<string>("ReadCookie.ReadCookie", "participationEventId");
        var cookieParticipation = await JS.InvokeAsync<string>("ReadCookie.ReadCookie", "participationStatus");
        if (cookieEventId == CurrentEvent.Id.ToString() && cookieParticipation != null)
        {
            LatestParticipation = new ParticipationVM()
            {
                EventId = CurrentEvent.Id.Value,
                Status = cookieParticipation == "1" ? ParticipationStatus.Accept : ParticipationStatus.Reject
            };
        }
    }

    async Task Respond(bool accept)
    {
        var participation = await InviteService.RespondAnon(CurrentEvent.Id.Value, accept, ParticipantName, InviteCode);
        await JS.InvokeAsync<object>("WriteCookie.WriteCookie", "participationId", participation.Id, DateTime.Now.AddMinutes(1));
        await JS.InvokeAsync<object>("WriteCookie.WriteCookie", "participationEventId", participation.EventId, DateTime.Now.AddMinutes(1));
        await JS.InvokeAsync<object>("WriteCookie.WriteCookie", "participationStatus", participation.Status, DateTime.Now.AddMinutes(1));
        await Responded.InvokeAsync(participation);
    }

    void ChangeResponse()
    {
        LatestParticipation = null;
    }
}

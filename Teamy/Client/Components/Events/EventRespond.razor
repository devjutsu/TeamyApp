@inject IManageInvites InviteService


@if (Participation() == ParticipationStatus.NotSet)
{
    <div class="dummy-block">
        <div>Are you coming?</div>
        <div class="form-inline">
            <button @onclick="() => Respond(accept:true)" class="btn btn-success" disabled="@DisableRespond">Yes</button>
            <button @onclick="() => Respond(accept:false)" class="btn btn-danger" disabled="@DisableRespond">No</button>
        </div>
    </div>
}
else
{
    @if (Participation() == ParticipationStatus.Accept)
    {
        <div class="dummy-block">
            <div>You're in!</div>
            <button class="btn btn-link" @onclick="ChangeResponse">Change my response</button>
        </div>
    }
    else if (Participation() == ParticipationStatus.Reject)
    {
        <div class="dummy-block">
            <div>You're not going :(</div>
            <button class="btn btn-link" @onclick="ChangeResponse">Change attendance</button>
        </div>
    }
}

@code {
    [Parameter]
    public EventVM CurrentEvent { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public EventCallback NavigateTo { get; set; }
    bool DisableRespond => false;

    ParticipationStatus Participation()
        => CurrentEvent.CreatedById == UserId
                    ? ParticipationStatus.Creator
                    : CurrentEvent.Participants?.FirstOrDefault(o => o.UserId == UserId)?.Status
                        ?? ParticipationStatus.NotSet;

    async Task Respond(bool accept)
    {
        var participation = await InviteService.Respond(CurrentEvent.Id.Value, accept, "", CurrentEvent.InviteCode);
        CurrentEvent.Participants.Add(participation);


        await NavigateTo.InvokeAsync();
    }

    void ChangeResponse()
        => CurrentEvent.Participants?.RemoveAll(o => o.UserId == UserId);
}

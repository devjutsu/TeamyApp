@inject IManageInvites InviteService

@if (Participation() == ParticipationStatus.NotSet)
{
    <div class="default-block invite-participation-block">
        <h4>Are you coming?</h4>
        <div class="d-flex justify-content-center participate-btns invite-participation-inside">
            <button @onclick="() => Respond(accept:true)" class="btn btn-patcitipate-yes">Yes</button>
            <button @onclick="() => Respond(accept:false)" class="btn btn-patcitipate-no">No</button>
        </div>
    </div>
}
else
{
    @if (Participation() == ParticipationStatus.Accept)
    {
        <div class="default-block invite-participation-block">
            <h4>You're in :)</h4>
            <div class="d-flex justify-content-center participate-btns invite-participation-inside">
                <button class="btn btn-secondary btn-change-participation" @onclick="ChangeResponse">Change response</button>
            </div>
        </div>
    }
    else if (Participation() == ParticipationStatus.Reject)
    {
        <div class="default-block invite-participation-block">
            <h4>You're not going :(</h4>
            <div class="d-flex justify-content-center participate-btns invite-participation-inside">
                <button class="btn btn-secondary btn-change-participation" @onclick="ChangeResponse">Change response</button>
            </div>
        </div>
    }
}

@code {
    [CascadingParameter]
    IModalService Modal { get; set; }
    [Parameter]
    public EventVM CurrentEvent { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
    public EventCallback NavigateTo { get; set; }
    List<ParticipationVM> PrevParticipation { get; set; } = new List<ParticipationVM>();

    ParticipationStatus Participation()
        => CurrentEvent.CreatedById == UserId
                    ? ParticipationStatus.Creator
                    : CurrentEvent.Participants?.FirstOrDefault(o => o.UserId == UserId)?.Status
                        ?? ParticipationStatus.NotSet;

    async Task Respond(bool accept)
    {
        if (PrevParticipation?.FirstOrDefault(o => o.UserId == UserId)?.Status == ParticipationStatus.Accept && accept == false)
        {
            if (CurrentEvent.Polls.Any(o => o.Choices.Any(c => c.Answers.Any(a => a.UserId == UserId))))
            {
                var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
                var parameters = new ModalParameters();
                parameters.Add("Message", "Your votes for this event will be deleted!");
                var messageModal = Modal.Show<ConfirmModal>("Cancel participation?", parameters, options);
                var result = await messageModal.Result;
                if (!result.Cancelled)
                {
                    await ChangeParticipation(accept);
                }
            }
            else
            {
                await ChangeParticipation(accept);
            }
        }
        else
        {
            await ChangeParticipation(accept);
        }
    }

    async Task ChangeParticipation(bool accept)
    {
        var participation = await InviteService.Respond(CurrentEvent.Id.Value, accept, "", CurrentEvent.InviteCode);
        CurrentEvent.Participants.Add(participation);

        await NavigateTo.InvokeAsync();
    }

    void ChangeResponse()
    {
        PrevParticipation = CurrentEvent.Participants?.ToList() ?? new List<ParticipationVM>();
        CurrentEvent.Participants?.RemoveAll(o => o.UserId == UserId);
    }
}

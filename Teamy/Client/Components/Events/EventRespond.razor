@inject IManageInvites InviteService

@if (Participation == ParticipationStatus.NotSet)
{
    <div>Are you coming?</div>
    <div class="form-inline">
        <button @onclick="() => Respond(accept:true)" class="btn btn-success" disabled="@DisableRespond">Yes</button>
        <button @onclick="() => Respond(accept:false)" class="btn btn-danger" disabled="@DisableRespond">No</button>
    </div>
}
else
{
    @if(Participation == ParticipationStatus.Accept)
    {
        <div>You're in!</div>
        <button class="btn btn-link" @onclick="ChangeResponse">Change my response</button>
    }
    else if(Participation == ParticipationStatus.Reject)
    {
        <div>You're not going :(</div>
        <button class="btn btn-link" @onclick="ChangeResponse">Change my response</button>
    }
}

@code {
    [Parameter]
    public EventVM CurrentEvent { get; set; }
    [Parameter]
    public string UserId { get; set; }

    bool DisableRespond => false; //string.IsNullOrEmpty(ParticipantName);

    ParticipationStatus Participation
        => CurrentEvent.CreatedById == UserId
                    ? ParticipationStatus.Creator
                    : CurrentEvent.Participants?.FirstOrDefault(o => o.UserId == UserId)?.Status 
                        ?? ParticipationStatus.NotSet;

    async Task Respond(bool accept)
        => await InviteService.Respond(CurrentEvent.Id.Value, accept);

    void ChangeResponse()
        => CurrentEvent.Participants = null;
}

@using Microsoft.AspNetCore.SignalR.Client
@inject IManageChats ChatService

<div class="dummy-block">
    @if (CurrentEvent != null)
    {
        @if (ChatMessages != null)
        {
            @foreach (var message in ChatMessages)
            {
                <div>
                    <span class="oi oi-envelope-closed" style="font-size:small;"
              title="@(message.SentAt.Value.ToShortDateString() + " - " + message.SentAt.Value.ToLongTimeString())"
              @onclick="() => OnClickEnvelope(message)">
                    </span>
                    <span style="font-size:small;">
                        @message.SentBy
                    </span>
                    <span style="font-size:small;">
                        : @message.Text
                    </span>
                </div>

            }

        }
        <input class="form-control" @bind="MessageToSend" @bind:event="oninput" @ref="inputMessage"
                placeholder="Type your comment" @onkeydown="@(e => KeyPressed(e))" />

        <button class="btn btn-primary" @onclick="Send" style="margin-top:1rem;">Send</button>
    }
</div>

@code {
    [Parameter]
    public EventVM CurrentEvent { get; set; }
    public List<ChatMessageVM> ChatMessages { get; set; } = new List<ChatMessageVM>();
    public string MessageToSend { get; set; } = "";
    HubConnection _hub;
    ElementReference inputMessage;

    protected override async Task OnInitializedAsync()
    {
        ChatMessages = await ChatService.Get(CurrentEvent.Id.Value);

        _hub = new HubConnectionBuilder()
                    .WithUrl(Nav.BaseUri + "chathub")
                    .WithAutomaticReconnect()
                    .Build();
        await _hub.StartAsync();

        _hub.On<ChatMessageVM>("ChatUpdated", async (message) =>
        {
            if (message.EventId == CurrentEvent.Id)
            {
                ChatMessages = await ChatService.Get(CurrentEvent.Id.Value);
                StateHasChanged();
            }
        });
    }

    async Task KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
            await Send();
    }

    async Task Send()
    {
        if (!string.IsNullOrWhiteSpace(MessageToSend))
        {
            await ChatService.Post(new ChatMessageVM() { EventId = CurrentEvent.Id.Value, Text = MessageToSend });
            MessageToSend = "";
        }
    }

    async Task OnClickEnvelope(ChatMessageVM message)
    {
        if (string.IsNullOrWhiteSpace(MessageToSend))
            MessageToSend = $"{message.SentBy} ";
        else
            MessageToSend += $" {message.SentBy} ";

        await inputMessage.FocusAsync();
    }
}

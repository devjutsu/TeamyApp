@inject IManagePolls PollService
@inject IJSRuntime JS

<div>
    @if (string.IsNullOrEmpty(@EditedEvent.ImageUrl))
    {
        <div class="d-block d-sm-none" style="height:50px;"></div>
    }
    <EditImg DeleteConfirmation=true ImgUrl=@EditedEvent.ImageUrl OnChange=@ImageChange />

    <input class="event-edit-title d-none d-sm-block" @bind-value="@EditedEvent.Title" placeholder="Event title" tabindex="0" id="title-input" />
    <input class="event-edit-title d-block d-sm-none" @bind-value="@EditedEvent.Title" placeholder="Event title" tabindex="0" id="title-input"
           style="font-size: 22px;" />
    <div class="row">
        <div class="col-md-6">

            <div class="default-block">
                <div>
                    <h5>Description</h5>
                    <textarea rows=2 @bind="@EditedEvent.Description" class="fullwidth-input" tabindex="0" />
                </div>

                <h5>Date and time</h5>
                <div class="editdate-container">
                    @foreach (var date in EditedEvent.ProposedDates ?? new List<ProposedDateVM>())
                    {
                        @if (EditingDate == date)
                        {
                            <div class="d-flex editdate-element">
                                <div class="d-flex flex-nowrap justify-content-between">
                                    <div class="" style="padding:.8rem 0 .8rem 0;">
                                        @date.Date.ToString("ddd, dd MMM")
                                        &nbsp;
                                    </div>
                                    <div class="" style="padding:.8rem 0 .8rem 0;">
                                        @date.Date.ToString("HH:mm") - @date.DateTo.ToString("HH:mm")
                                    </div>
                                </div>

                                <button class="btn btn-outline-secondary btn-nohover btn-sm" @onclick="() => EditDate(date)" tabindex="-1"
                                style="min-width:.5rem; padding-top:.5rem">
                                    <span class="oi oi-pencil small" />
                                </button>
                                <button class="btn btn-outline-secondary btn-nohover btn-sm" @onclick="() => RemoveDate(date)" tabindex="-1"
                                style="min-width:.5rem; padding-top:.rem">
                                    <span class="oi oi-x small" />
                                </button>
                            </div>

                            <div class="d-flex">
                                <span class="datepicker-toggle">
                                    <span class="datepicker-toggle-button"></span>
                                    <input type="date" class="datepicker-input" id="date-input" @bind=date.Date>
                                </span>

                                <div>
                                    <div>
                                        <input type="time" id="timeFrom" required class="time-edit" @bind=date.Date @bind:format="HH:mm" />
                                    </div>
                                    <div>
                                        <input type="time" id="timeTo" required class="time-edit" @bind=date.DateTo @bind:format="HH:mm" />
                                    </div>
                                </div>
                                <button class="btn btn-outline-secondary btn-datepicker-ok" @onclick="@(() => DateEditDone())"><span class="oi oi-check" /></button>
                            </div>
                        }
                        else if (EditedEvent.DateStatus == EventDateStatus.Locked && date.Date == EditedEvent.EventDate && date.DateTo == EditedEvent.EventDateTo)
                        {
                            <div class="d-flex editdate-element editdate-element-selected">
                                <div class="d-flex flex-nowrap justify-content-between">
                                    <div class="" style="padding:.8rem 0 .8rem 0;">
                                        @date.Date.ToString("ddd, dd MMM")
                                        &nbsp;
                                    </div>
                                    <div class="" style="padding:.8rem 0 .8rem 0;">
                                        @date.Date.ToString("HH:mm") - @date.DateTo.ToString("HH:mm")
                                    </div>
                                </div>
                                <button class="btn btn-outline-secondary btn-nohover btn-sm" @onclick="(() => UnlockDate())" tabindex="-1"
                                style="min-width:.5rem;">
                                    <span class="oi oi-lock-locked small" />
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="d-flex editdate-element">
                                <div class="d-flex flex-nowrap justify-content-between">
                                    <div class="" style="padding:.8rem 0 .8rem 0;">
                                        @date.Date.ToString("ddd, dd MMM")
                                        &nbsp;
                                    </div>
                                    <div class="" style="padding:.8rem 0 .8rem 0;">
                                        @date.Date.ToString("HH:mm") - @date.DateTo.ToString("HH:mm")
                                    </div>
                                </div>

                                <button class="btn btn-outline-secondary btn-nohover btn-sm" @onclick="() => EditDate(date)" tabindex="-1"
                                style="min-width:.5rem; padding-top:.5rem">
                                    <span class="oi oi-pencil small" />
                                </button>
                                <button class="btn btn-outline-secondary btn-nohover btn-sm" @onclick="() => RemoveDate(date)" tabindex="-1"
                                style="min-width:.5rem; padding-top:.rem">
                                    <span class="oi oi-x small" />
                                </button>
                            </div>
                        }

                        

                    }
                </div>

                <div class="add-date-btn">
                    <button class="btn btn-outline-success btn-sm" @onclick="() => AddDate()" tabindex="0">
                        <span class="oi oi-plus small" /> &nbsp;date and time
                    </button>
                </div>

                <div>
                    <h5>Location</h5>
                    <input class="text-input fullwidth-input" @bind-value="@EditedEvent.Where" tabindex="0" />
                </div>
            </div>
        </div>
    </div>

    <h4 style="margin-top: 2rem; margin-left: 1rem;">Polls</h4>
    <div class="row">
        @if (EditedEvent?.Polls != null && EditedEvent.Polls.Count > 0)
        {
            @foreach (var poll in EditedEvent.Polls)
            {
                <div class="col-md-6">
                    <div class="default-block">
                        <div>
                            <div class="event-edit-poll-question">
                                <input type="text" value="@poll.Question" class="text-input poll-input-question" tabindex="0"
                               placeholder="Type your question to participants" @onchange="@((e) => SetQuestion(e, poll))" />

                                <button class="btn btn-outline-secondary btn-nohover btn-input-right" @onclick="() => RemovePoll(poll)" type="button" tabindex="-1">
                                    <span class="oi oi-trash" />
                                </button>
                            </div>

                            @foreach (var ans in poll.Choices)
                            {
                                <div class="event-edit-poll-answer">
                                    <input type="text" value="@ans.Choice" class="text-input poll-input-answer" id=@ans.InputId tabindex="0"
                               placeholder="Input answer choice" @onchange="@((e) => SetChoice(e, poll, ans))" />
                                    <div class="btn-input-right">
                                        <button class="btn btn-outline-secondary btn-nohover" type="button" @onclick="() => RemoveChoice(poll, ans)" tabindex="-1">
                                            <span class="oi oi-x small" />
                                        </button>
                                    </div>
                                </div>
                            }

                            <div class="d-flex align-middle">
                                <button class="btn btn-sm btn-outline-success add-choice-btn" @onclick="() => AddChoice(poll)" tabindex="-1">
                                    <span class="oi oi-plus small" /> &nbsp;choice
                                </button>

                                <div class="check-container" style="margin-top:.7rem; position:relative;"
                             @onclick="@(() => poll.MultiChoice = !poll.MultiChoice)">
                                    <input type="checkbox" checked=@poll.MultiChoice tabindex="-1">
                                    <span class="checkmark" />
                                    <label class="multi-choice-lbl">Allow multiple choice</label>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <div class="d-flex justify-content-center add-poll-div">
        <button class="btn btn-outline-success" @onclick="AddPoll" tabindex="0">
            <span class="oi oi-plus small" /> &nbsp; poll question
        </button>
    </div>

    <div class="d-flex justify-content-center add-poll-div">
        <button class="btn btn-primary" @onclick="() => DoneEdit()" tabindex="0"> Save and Proceed <span class="oi oi-arrow-right" /></button>
    </div>
</div>

@code {
    [CascadingParameter]
    IModalService Modal { get; set; }
    [Parameter]
    public EventVM InitialEvent { get; set; }
    [Parameter]
    public EventCallback<EventVM> DoneEditing { get; set; }

    public EventVM EditedEvent { get; set; }

    ProposedDateVM? EditingDate { get; set; }

    string FocusClass = string.Empty;
    PollVM? CurrentEditingPoll { get; set; } = null;
    string? FocusChoiceInputId { get; set; } = string.Empty;

    public string DatePeriod(ProposedDateVM date)
    => $"{date.Date.ToShortDateString()} {@date.Date.ToShortTimeString()} - {@date.DateTo.ToShortTimeString()}";

    protected override void OnInitialized()
    {
        EditedEvent = (EventVM)InitialEvent.Clone();
    }

    void ImageChange(string ImgUrl)
    {
        EditedEvent.ImageUrl = ImgUrl;
    }

    async Task DeleteEventVote(PollVM poll)
    {
        var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
        var response = Modal.Show<ConfirmModal>("Delete poll", options);
        var result = await response.Result;
        if (!result.Cancelled)
        {
            EditedEvent.Polls.Remove(poll);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("elementFocus", "title-input");
        }
        if (!firstRender)
        {
            if (!string.IsNullOrEmpty(FocusChoiceInputId))
            {
                await JS.InvokeVoidAsync("elementFocus", FocusChoiceInputId);
                FocusChoiceInputId = null;
            }
            else if (CurrentEditingPoll == null)
            {
                await JS.InvokeVoidAsync("focusLastElementByClass", FocusClass);
                CurrentEditingPoll = null;
            }
        }
    }

    async Task AddPoll()
    {
        if (EditedEvent.Polls == null)
            EditedEvent.Polls = new List<PollVM>();

        EditedEvent.Polls.Add(PollService.NewPoll());
        FocusClass = "poll-input-question";
        CurrentEditingPoll = null;

    }

    void AddChoice(PollVM poll)
    {
        var newInputId = Guid.NewGuid().ToString();
        poll.Choices.Add(new PollChoiceVM() { Answers = new List<PollAnswerVM>(), InputId = newInputId });
        FocusClass = "poll-input-answer";
        CurrentEditingPoll = poll;
        FocusChoiceInputId = newInputId;
    }

    void RemoveChoice(PollVM poll, PollChoiceVM choice)
    {
        poll.Choices.Remove(choice);
    }

    void RemovePoll(PollVM poll)
    {
        EditedEvent.Polls.Remove(poll);
    }

    async Task DoneEdit()
    {
        foreach (var p in EditedEvent.Polls)
        {
            p.Choices = p.Choices.Where(o => !string.IsNullOrWhiteSpace(o.Choice)).ToList();
        }

        if (string.IsNullOrWhiteSpace(EditedEvent.Title))
        {
            var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
            var parameters = new ModalParameters();
            parameters.Add("Message", "Please, input non-empty event title.");
            var response = Modal.Show<NotifyModal>("Information", parameters, options);
            var result = await response.Result;
            return;
        }
        if (EditedEvent.Polls?.Any(o => string.IsNullOrEmpty(o.Question)) ?? false)
        {
            var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
            var parameters = new ModalParameters();
            parameters.Add("Message", "Please, input non-empty poll question.");
            var response = Modal.Show<NotifyModal>("Information", parameters, options);
            var result = await response.Result;
            return;
        }
        else if (EditedEvent.Polls?.Any(o => BadPollChoices(o)) ?? false)
        {
            var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
            var parameters = new ModalParameters();
            parameters.Add("Message", "Polls should have 2 or more non-empty choices.");
            var response = Modal.Show<NotifyModal>("Information", parameters, options);
            var result = await response.Result;
            return;
        }

        if (EditedEvent.ProposedDates.Count == 0)
        {
            var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
            var parameters = new ModalParameters();
            parameters.Add("Message", "Please, add at least one Date proposition for your event");
            var response = Modal.Show<NotifyModal>("Information", parameters, options);
            var result = await response.Result;
            return;
        }

        await DoneEditing.InvokeAsync(EditedEvent);
    }

    bool BadPollChoices(PollVM poll)
    {
        if (poll.Choices.Where(o => !string.IsNullOrEmpty(o.Choice)).Count() < 2)
            return true;

        return false;
    }

    void RemoveDate(ProposedDateVM date)
    {
        EditedEvent.ProposedDates.Remove(date);
    }

    async Task AddDate()
    {
        //var parameters = new ModalParameters();
        //parameters.Add(nameof(DateEditModal.DateTimeFrom), DateTime.Today.AddDays(1).AddHours(18));
        //parameters.Add(nameof(DateEditModal.DateTimeTo), DateTime.Today.AddDays(1).AddHours(20));
        //var response = Modal.Show<DateEditModal>("Add date and time", parameters, new ModalOptions() { Class = "date-edit-modal" });
        //var result = await response.Result;
        //if (!result.Cancelled)
        //{
        //    var proposed = (ProposedDateVM)result.Data;

        //    if (EditedEvent.ProposedDates == null)
        //        EditedEvent.ProposedDates = new List<ProposedDateVM>();

        //    EditedEvent.ProposedDates.Add(proposed);
        //}


        // @! ADD
    }

    async Task EditDate(ProposedDateVM date)
    {
        //var parameters = new ModalParameters();
        //parameters.Add(nameof(DateEditModal.DateTimeFrom), date.Date);
        //parameters.Add(nameof(DateEditModal.DateTimeTo), date.DateTo);
        //var response = Modal.Show<DateEditModal>("Add date and time", parameters, new ModalOptions() { Class = "date-edit-modal" });
        //var result = await response.Result;
        //if (!result.Cancelled)
        //{
        //    var proposed = (ProposedDateVM)result.Data;
        //    var index = EditedEvent.ProposedDates.IndexOf(date);
        //    EditedEvent.ProposedDates[index] = proposed;
        //}

        FocusChoiceInputId = "date-input";
        EditingDate = date;
        Console.WriteLine($"Editing: {date.Date.ToShortDateString()} {date.Date.ToShortTimeString()} - {date.DateTo.ToShortTimeString()}");
    }

    async Task UnlockDate()
    {
        var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
        var parameters = new ModalParameters();
        parameters.Add("Message", "The Date is already set, do you want to allow changing it?");
        var response = Modal.Show<ConfirmModal>("Unlock date?", parameters, options);
        var result = await response.Result;
        if (!result.Cancelled)
        {
            var date = new ProposedDateVM() { Date = EditedEvent.EventDate.Value, DateTo = EditedEvent.EventDateTo.Value, EventId = EditedEvent.Id };
            EditedEvent.EventDate = null;
            EditedEvent.EventDateTo = null;
            EditedEvent.DateStatus = EventDateStatus.Voting;
            await PollService.UnlockDate(date);
        }
    }

    void SetQuestion(ChangeEventArgs e, PollVM poll)
    {
        poll.Question = (string)e.Value;
        CurrentEditingPoll = poll;

        if (poll.Choices == null || poll.Choices.Count == 0)
        {
            AddChoice(poll);
        }
    }

    void SetChoice(ChangeEventArgs e, PollVM poll, PollChoiceVM choice)
    {
        choice.Choice = (string)e.Value;

        if (poll.Choices.Last() == choice)
        {
            Console.WriteLine("Last");
            AddChoice(poll);
            CurrentEditingPoll = poll;
        }
    }

    void DateEditDone()
    {
        Console.WriteLine("Done date edit");
        EditingDate = null;
    }
}

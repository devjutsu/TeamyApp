@inject IManagePolls PollService

<div>
    <div class="d-flex flex-wrap justify-content-around">
        <div>
            <label>What</label>
            <input class="form-control" @bind-value="@EditedEvent.Title" @ref="titleRef" />
            <label>When</label>
            <input type="date" @bind="@EditedEvent.When" @bind:format="yyyy-MM-dd" class="form-control event-text-input event-input-date">
            <label>Details</label>
            <textarea rows=2 @bind="@EditedEvent.Description" class="form-control" />
            <label>Where</label>
            <input class="form-control" @bind-value="@EditedEvent.Where" />
        </div>
        <div>
            <EditImg DeleteConfirmation=true ImgUrl=@EditedEvent.ImageUrl OnChange=@ImageChange />
        </div>
    </div>

    <div>
        <h5>Voting</h5>
        @if (EditedEvent?.Polls != null && EditedEvent.Polls.Count > 0)
        {
            @foreach (var poll in EditedEvent.Polls)
            {
                <div>
                    <div class="d-flex justify-content-between">
                        <div>
                            <input @bind-value="@poll.Question" class="form-control" />
                            <ul>
                                @foreach (var ans in poll.Choices)
                                {
                                    <li>
                                        <input @bind-value="@ans.Choice" class="form-control" />
                                    </li>
                                }
                            </ul>
                            <button class="btn btn-sm btn-info" @onclick="() => AddChoice(poll)">&nbsp;+&nbsp;</button>
                        </div>
                        <div>
                            <button class="btn btn-link" @onclick="(() => EditEventVote(poll))">
                                <span class="oi oi-pencil" />
                            </button>
                            <button class="btn btn-link" @onclick="(() => DeleteEventVote(poll))">
                                <span class="oi oi-trash" />
                            </button>
                        </div>
                    </div>
                </div>
            }
        }

        <button class="btn btn-success" @onclick="AddPoll">Add question</button>
    </div>
    <p>&nbsp;</p>
        <button class="btn btn-primary" @onclick="() => DoneEdit()" >Save and Proceed <span class="oi oi-arrow-right" /></button>
</div>



@code {
    [CascadingParameter] IModalService Modal { get; set; }
    [Parameter]
    public EventVM InitialEvent { get; set; }
    [Parameter]
    public EventCallback<EventVM> DoneEditing { get; set; }
    public EventVM EditedEvent { get; set; }

    ElementReference titleRef;

    protected override void OnInitialized()
    {
        EditedEvent = (EventVM)InitialEvent.Clone();
    }

    void ImageChange(string ImgUrl)
    {
        EditedEvent.ImageUrl = ImgUrl;
    }

    async Task DeleteEventVote(PollVM poll)
    {
        var options = new ModalOptions() { Class = "default-modal" };
        var messageModal = Modal.Show<ConfirmModal>("Delete poll", options);
        var result = await messageModal.Result;
        if (!result.Cancelled)
        {
            EditedEvent.Polls.Remove(poll);
        }
    }

    async Task EditEventVote(PollVM opt)
    {

    }

    void AddPoll()
    {
        EditedEvent.Polls.Add(PollService.NewPoll());
    }

    void AddChoice(PollVM poll)
    {
        poll.Choices.Add(new PollChoiceVM() { Answers = new List<PollAnswerVM>() });
    }

    async Task DoneEdit()
    {
        await DoneEditing.InvokeAsync(EditedEvent);
    }
}

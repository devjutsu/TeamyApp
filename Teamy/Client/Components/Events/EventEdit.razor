@inject IManagePolls PollService
@inject IJSRuntime JS

<div>
    <input class="event-edit-title" @bind-value="@EditedEvent.Title" @ref="titleRef" placeholder="Event title" />
    <div class="row">
        <div class="col-md-6">

            <div class="default-block">
                <div>
                    <h5>Description</h5>
                    <textarea rows=2 @bind="@EditedEvent.Description" class="fullwidth-input" />
                </div>

                <h5>Date and time</h5>
                @foreach (var date in EditedEvent.ProposedDates ?? new List<ProposedDateVM>())
                {
                    <div />
                    @if (EditedEvent.DateStatus == EventDateStatus.Locked && date.Date == EditedEvent.EventDate && date.DateTo == EditedEvent.EventDateTo)
                    {
                        @DatePeriod(date)
                        <button class="btn btn-sm btn-outline-secondary d-inline btn-sm-lock" @onclick="(() => UnlockDate())"><span class="oi oi-lock-locked" /></button>
                    }
                    else
                    {
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => RemoveDate(date)">
                            <span class="oi oi-minus" />
                        </button>
                        @DatePeriod(date)
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => EditDate(date)">
                            <span class="oi oi-pencil" />
                        </button>

                        <button class="btn btn-sm btn-outline-secondary d-inline btn-sm-unlock"><span class="oi oi-lock-locked" /></button>
                    }
                }

                <button class="btn btn-outline-success btn-sm" @onclick="() => AddDate()">
                    <span class="oi oi-plus" />
                </button>

                <div>
                    <h5>Location</h5>
                    <input class="text-input fullwidth-input" @bind-value="@EditedEvent.Where" />
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="default-block">
                <EditImg DeleteConfirmation=true ImgUrl=@EditedEvent.ImageUrl OnChange=@ImageChange />
            </div>
        </div>
    </div>

    <h4 style="margin-top: 2rem;">Poll</h4>
    <div class="row">
        @if (EditedEvent?.Polls != null && EditedEvent.Polls.Count > 0)
        {
            @foreach (var poll in EditedEvent.Polls)
            {
                <div class="col-md-6">
                    <div class="default-block">
                        <div>
                            <div class="event-edit-poll-question">
                                <input type="text" value="@poll.Question" class="text-input poll-input-question"
                               placeholder="Type your question to participants" @onchange="@((e) => SetQuestion(e, poll))" />

                                <button class="btn btn-outline-danger btn-input-right" @onclick="() => RemovePoll(poll)" type="button" tabindex="98">
                                    <span class="oi oi-trash" />
                                </button>
                            </div>

                            @foreach (var ans in poll.Choices)
                            {
                                <div class="event-edit-poll-answer">
                                    <input type="text" value="@ans.Choice" class="text-input poll-input-answer"
                               placeholder="Input answer choice" @onchange="@((e) => SetChoice(e, poll, ans))" />
                                    <div class="btn-input-right">
                                        <button class="btn btn-outline-secondary" type="button" @onclick="() => RemoveChoice(poll, ans)" tabindex="99">
                                            <span class="oi oi-x" />
                                        </button>
                                    </div>
                                </div>
                            }

                            <div class="form-check form-check-inline">
                                <input class="form-check-input" type="checkbox" @bind=@poll.MultiChoice>
                                <label class="form-check-label" for="inlineCheckbox1">Multi choice</label>
                            </div>
                            <button class="btn btn-sm btn-outline-success" @onclick="() => AddChoice(poll)">
                                <span class="oi oi-plus" />
                            </button>
                            <button class="btn btn-sm btn-link" @onclick="(() => DeleteEventVote(poll))">
                                <span class="oi oi-trash" />
                            </button>
                        </div>
                    </div>
                </div>
            }
        }

        <button class="btn btn-outline-success" @onclick="AddPoll">Add question</button>
    </div>
    <p>&nbsp;</p>
    <button class="btn btn-primary" @onclick="() => DoneEdit()">Save and Proceed <span class="oi oi-arrow-right" /></button>
</div>

@code {
    [CascadingParameter]
    IModalService Modal { get; set; }
    [Parameter]
    public EventVM InitialEvent { get; set; }
    [Parameter]
    public EventCallback<EventVM> DoneEditing { get; set; }
    public EventVM EditedEvent { get; set; }

    string FocusClass = string.Empty;
    ElementReference titleRef;
    PollVM? CurrentEditingPoll { get; set; } = null;

    public string DatePeriod(ProposedDateVM date)
    => $"{date.Date.ToShortDateString()} {@date.Date.ToShortTimeString()} - {@date.DateTo.ToShortTimeString()}";

    protected override void OnInitialized()
    {
        EditedEvent = (EventVM)InitialEvent.Clone();
    }

    void ImageChange(string ImgUrl)
    {
        EditedEvent.ImageUrl = ImgUrl;
    }

    async Task DeleteEventVote(PollVM poll)
    {
        var response = Modal.Show<ConfirmModal>("Delete poll", new ModalOptions() { Class = "default-modal" });
        var result = await response.Result;
        if (!result.Cancelled)
        {
            EditedEvent.Polls.Remove(poll);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && CurrentEditingPoll == null)
        {
            Console.WriteLine("Focusing");
            await JS.InvokeVoidAsync("focusLastElementByClass", FocusClass);
        }
    }

    async Task AddPoll()
    {
        if (EditedEvent.Polls == null)
            EditedEvent.Polls = new List<PollVM>();

        EditedEvent.Polls.Add(PollService.NewPoll());
        FocusClass = "poll-input-question";
        CurrentEditingPoll = null;
    }

    void AddChoice(PollVM poll)
    {
        poll.Choices.Add(new PollChoiceVM() { Answers = new List<PollAnswerVM>() });
        FocusClass = "poll-input-answer";
        CurrentEditingPoll = poll;
    }

    void RemoveChoice(PollVM poll, PollChoiceVM choice)
    {
        poll.Choices.Remove(choice);
    }

    void RemovePoll(PollVM poll)
    {
        EditedEvent.Polls.Remove(poll);
    }

    async Task DoneEdit()
    {
        if (string.IsNullOrWhiteSpace(EditedEvent.Title))
        {
            var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
            var parameters = new ModalParameters();
            parameters.Add("Message", "Please, input non-empty event title.");
            var response = Modal.Show<NotifyModal>("Information", parameters, options);
            var result = await response.Result;
            return;
        }
        if (EditedEvent.Polls?.Any(o => string.IsNullOrEmpty(o.Question)) ?? false)
        {
            var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
            var parameters = new ModalParameters();
            parameters.Add("Message", "Please, input non-empty poll question.");
            var response = Modal.Show<NotifyModal>("Information", parameters, options);
            var result = await response.Result;
            return;
        }
        else if (EditedEvent.Polls?.Any(o => BadPollChoices(o)) ?? false)
        {
            var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
            var parameters = new ModalParameters();
            parameters.Add("Message", "Polls should have 2 or more non-empty choices.");
            var response = Modal.Show<NotifyModal>("Information", parameters, options);
            var result = await response.Result;
            return;
        }

        if (EditedEvent.ProposedDates.Count == 0)
        {
            var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
            var parameters = new ModalParameters();
            parameters.Add("Message", "Please, add at least one Date proposition for your event");
            var response = Modal.Show<NotifyModal>("Information", parameters, options);
            var result = await response.Result;
            return;
        }

        await DoneEditing.InvokeAsync(EditedEvent);
    }

    bool BadPollChoices(PollVM poll)
    {
        if (poll.Choices.Where(o => !string.IsNullOrEmpty(o.Choice)).Count() < 2)
            return true;

        return false;
    }

    void RemoveDate(ProposedDateVM date)
    {
        EditedEvent.ProposedDates.Remove(date);
    }

    async Task AddDate()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DateEditModal.DateTimeFrom), DateTime.Today.AddDays(1).AddHours(18));
        parameters.Add(nameof(DateEditModal.DateTimeTo), DateTime.Today.AddDays(1).AddHours(20));
        var response = Modal.Show<DateEditModal>("Add date and time", parameters, new ModalOptions() { Class = "date-edit-modal" });
        var result = await response.Result;
        if (!result.Cancelled)
        {
            var proposed = (ProposedDateVM)result.Data;

            if (EditedEvent.ProposedDates == null)
                EditedEvent.ProposedDates = new List<ProposedDateVM>();

            EditedEvent.ProposedDates.Add(proposed);
        }
    }

    async Task EditDate(ProposedDateVM date)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DateEditModal.DateTimeFrom), date.Date);
        parameters.Add(nameof(DateEditModal.DateTimeTo), date.DateTo);
        var response = Modal.Show<DateEditModal>("Add date and time", parameters, new ModalOptions() { Class = "date-edit-modal" });
        var result = await response.Result;
        if (!result.Cancelled)
        {
            var proposed = (ProposedDateVM)result.Data;
            var index = EditedEvent.ProposedDates.IndexOf(date);
            EditedEvent.ProposedDates[index] = proposed;
        }
    }

    async Task UnlockDate()
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", "The Date is already set, do you want to allow changing it?");
        var response = Modal.Show<ConfirmModal>("Unlock date?", parameters, new ModalOptions() { Class = "default-modal" });
        var result = await response.Result;
        if (!result.Cancelled)
        {
            var date = new ProposedDateVM() { Date = EditedEvent.EventDate.Value, DateTo = EditedEvent.EventDateTo.Value, EventId = EditedEvent.Id };
            EditedEvent.EventDate = null;
            EditedEvent.EventDateTo = null;
            EditedEvent.DateStatus = EventDateStatus.Voting;
            await PollService.UnlockDate(date);
        }
    }

    void SetQuestion(ChangeEventArgs e, PollVM poll)
    {
        poll.Question = (string)e.Value;
        CurrentEditingPoll = poll;

        if (poll.Choices == null || poll.Choices.Count == 0)
        {
            AddChoice(poll);
        }
    }

    void SetChoice(ChangeEventArgs e, PollVM poll, PollChoiceVM choice)
    {
        choice.Choice = (string)e.Value;

        if (poll.Choices.Last() == choice)
        {
            Console.WriteLine("Last");
            AddChoice(poll);
            CurrentEditingPoll = poll;
        }
    }
}

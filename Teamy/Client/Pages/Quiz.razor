@page "/q/{QCode}"
@inject IManageQuiz QuizService
@inject AppState AppState
@inject IJSRuntime JS;
@implements IDisposable

@if (CurrentQuiz == null)
{
    <div>Incorrect code</div>
}
else
{
    @if (!string.IsNullOrEmpty(@CurrentQuiz.ImageUrl))
    {
        <div class="img-viewblock d-none d-sm-block" style="background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0), #121212FF), url(@CurrentQuiz.ImageUrl);"></div>
        <div class="img-xs-viewblock d-block d-sm-none" style="background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0), #121212FF), url(@CurrentQuiz.ImageUrl);"></div>
    }
    else
    {
        <div class="noimg-viewblock d-none d-sm-block"></div>
        <div class="noimg-xs-viewblock d-block d-sm-none"></div>
    }

    <div class="event-titleblock">
        <div class="">
            <div class="event-title">@CurrentQuiz.Title</div>
            <div class="event-details">@CurrentQuiz.Details</div>
        </div>
    </div>

    <div class="row">
        @foreach (var question in CurrentQuiz.Questions)
        {
            <div class="col-md-6">
                @if (question.Type == QuizElementType.SingleSelectQuestion)
                {
                    <div class="default-block">
                        <div>
                            <h5>
                                @question.Question
                            </h5>
                        </div>
                        @foreach (var choice in question.Choices)
                        {
                            <div>
                                <div class="radio-container" style="margin-top:.7rem; position:relative;">
                                    <input type="radio">
                                    <span class="radiomark" />
                                    <label class="multi-choice-lbl" style="padding-left:.8rem;">@choice.Choice</label>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (question.Type == QuizElementType.MultiSelectQuestion)
                {
                    <div class="default-block">
                        <div>
                            <h5>
                                @question.Question
                            </h5>
                        </div>
                        @foreach (var choice in question.Choices)
                        {
                            <div @onclick="@(() => SetChoice(question, choice))">
                                <div class="check-container" style="margin-top:.7rem; position:relative;">
                                    <input type="checkbox" checked="@(VotedChoice(question, choice))">
                                    <span class="checkmark" />
                                    <label class="multi-choice-lbl" style="padding-left:.8rem;">@choice.Choice</label>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (question.Type == QuizElementType.FreeTextQuestion)
                {
                    <div class="default-block">
                        <h5>
                            @question.Question
                        </h5>
                        <textarea rows=3 class="fullwidth-input" />
                    </div>
                }
                else if (question.Type == QuizElementType.GradeQuestion)
                {

                    <div class="default-block">
                        <div>
                            <h5>
                                @question.Question
                            </h5>
                        </div>

                        <div>grade</div>
                    </div>
                }
                else if (question.Type == QuizElementType.Picture)
                {
                    <div class="silent-block d-flex justify-content-center">
                        <img src=@question.Question class="quiz-picture" />
                    </div>
                }
                else if (question.Type == QuizElementType.InformationOnly)
                {
                    <div class="default-block">
                        <div>
                            <h5>
                                @question.Question
                            </h5>
                        </div>
                        @foreach (var choice in question.Choices)
                        {
                            <div style="margin-top:.5rem; margin-bottom:.5rem;">@choice.Choice</div>
                        }
                    </div>
                }
                else
                {
                    <div class="default-block">
                        no option
                        <div>
                            <h5>
                                @question.Question
                            </h5>
                        </div>
                        @foreach (var choice in question.Choices)
                        {
                            <div style="margin-top:.5rem; margin-bottom:.5rem;">@choice.Choice</div>
                        }
                    </div>
                }

            </div>
        }
    </div>

    <div class="d-flex justify-content-center">
        <button class="btn btn-main" @onclick="(() => Submit())">Submit</button>
    </div>
}

@code {
    [Parameter]
    public string QCode { get; set; }

    public QuizVM CurrentQuiz { get; set; }

    public string CurrentUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = AppState.UserId ?? await JS.InvokeAsync<string>("ReadCookie.ReadCookie", "userId");
        var request = new QuizCodeVM()
            {
                QCode = this.QCode,
                UserId = CurrentUserId,
                // @! for MAUI, go away from Cookies
            };
        Console.WriteLine($"Got new UserId: {request.UserId}");
        CurrentQuiz = await QuizService.Get(request);

        if (!AppState.IsLoggedIn)
        {
            Console.WriteLine($"Saving cookie: {request.UserId}");
            await JS.InvokeAsync<object>("WriteCookie.WriteCookie", "userId", CurrentQuiz.UserId, DateTime.Now.AddYears(1));
        }

        //await QuizService.Post(new QuizAnswerVM());
        //await QuizService.Submit(QCode);
    }

    bool VotedChoice(QuizQuestionVM question, QuizChoiceVM choice)
    {
        if (question.Answers.Any(o => o.Answer == choice.Choice))
            return true;
        return false;
    }

    async Task SetChoice(QuizQuestionVM question, QuizChoiceVM choice)
    {
        var existingAnswer = question.Answers.FirstOrDefault(o => o.Answer == choice.Choice);
        if (existingAnswer != null)
            question.Answers.Remove(existingAnswer);
        else
            question.Answers.Add(new QuizAnswerVM() { Answer = choice.Choice, QCode = QCode, UserId = CurrentUserId });
    }

    async Task VoteText(ChangeEventArgs e)
    {
        Console.WriteLine($"Txt: {e.Value}");
    }

    async Task Submit()
    {
        // @! validate necessary answers
        // add Necessary flag to db + vm
    }

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}

@page "/"
@inject AppState AppState
@inject IManageEvents EventService
@implements IDisposable

<PageTitle>Dashboard</PageTitle>

<div>Hello, @AppState.UserDisplayName</div>

@if (AppState.StoredEvents != null)
{
    <div class="d-flex flex-wrap">
        @foreach(var evt in AppState.StoredEvents)
        {
            <div @onclick="() => GoEvent(evt)">
                <EventCard Evt="@evt"></EventCard>
            </div>
        }
    </div>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        //var cookieEventId = await JS.InvokeAsync<string>("ReadCookie.ReadCookie", "participationEventId");
        //var cookieParticipation = await JS.InvokeAsync<string>("ReadCookie.ReadCookie", "participationStatus");

        //if(cookieEventId != null && cookieParticipation != null)
        //{
            
        //}
    }

    protected override void OnInitialized()
    {
        EventService.LoadUpcoming();
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void GoEvent(EventVM e)
    {
        Nav.NavigateTo($"/event/{e.Id}");
    }
}
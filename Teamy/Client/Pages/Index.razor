@page "/"
@inject AppState AppState
@inject IManageEvents EventService
@implements IDisposable

<PageTitle>My Events</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        @if (AppState.StoredEvents != null && AppState.StoredEvents.Count > 0)
        {
            @if (AppState.FutureEvents.Any())
            {
                <h2>Upcoming events:</h2>
                <div class="row event-card-container">
                    @foreach (var evt in AppState.FutureEvents)
                    {
                        <div @onclick="() => GoEvent(evt)" class="col-md-6">
                            <EventCard Evt="@evt"></EventCard>
                        </div>
                    }
                </div>
            }

            @if (AppState.PastEvents.Any())
            {
                <h2>Past events:</h2>
                <div class="row event-card-container">
                    @foreach (var evt in AppState.PastEvents)
                    {
                        <div @onclick="() => GoEvent(evt)" class="col-md-6">
                            <EventCard Evt="@evt"></EventCard>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <h2>You currently have no events</h2>
            <a href="/create" class="btn btn-primary" style="margin-top:1rem;"><span class="oi oi-plus" /> Create one</a>
        }
        <p>&nbsp;</p>
    </Authorized>
</AuthorizeView>

@code {
    protected override async Task OnInitializedAsync()
    {
        //var cookieEventId = await JS.InvokeAsync<string>("ReadCookie.ReadCookie", "participationEventId");
        //var cookieParticipation = await JS.InvokeAsync<string>("ReadCookie.ReadCookie", "participationStatus");
    }

    protected override void OnInitialized()
    {
        EventService.LoadUpcoming();
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void GoEvent(EventVM e)
    {
        Nav.NavigateTo($"/event/{e.Id}");
    }
}
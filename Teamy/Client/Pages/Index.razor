@page "/"
@inject AppState AppState
@inject IManageEvents EventService
@implements IDisposable

<style>
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        opacity: 1;
    }
</style>


<PageTitle>My Events</PageTitle>
<div class="d-block d-md-none" style="height:40px;">space</div>

<div class="full-width bg-image"></div>
<AuthorizeView>
    <NotAuthorized>

        @if (AppState.Invite != null)
        {
            <h2>You are invited to:</h2>
            <div class="mask-text-over-img">
                <div @onclick="GoToInvite">
                    <EventCard Evt=AppState.Invite />
                </div>
            </div>
        }
        else
        {
            <div class="mask-text-over-img">
                <div class="row">
                    <div class="col-md-6">

                        <div class="d-flex justify-content-center">
                            <div class="d-none d-md-block" style="margin-top: 50px;">
                                <h2>Do Things Together</h2>
                            </div>
                            <div class="d-block d-md-none" style="">
                                <h2>Do Things Together</h2>
                            </div>
                        </div>


                        <div class="d-flex justify-content-center">Have new experience with your friends and meet new people</div>
                        <div class="d-flex justify-content-center">
                            <a href="#" @onclick="NavigateToLogin" class="btn btn-main-login">Login</a>
                            <a href="#" @onclick="NavigateToRegistration" class="btn btn-main-register">Register</a>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <Intro_right />
                    </div>
                </div>
            </div>
        }
    </NotAuthorized>
    <Authorized>

        @if (AppState.Invite != null)
        {
            <div class="mask-text-over-img">
                <h2>You are invited to:</h2>
                <div @onclick="GoToInvite">
                    <EventCard Evt=AppState.Invite />
                </div>
            </div>
        }

        @if (IsAdmin())
        {
            <div style="position: absolute; top: 3rem; right: 2rem;"><a href="/qm" style="font-size:22px;">Quiz Manage</a></div>
        }

        @if (loading)
        {
            <div class="loader">
                <div class="inner one"></div>
                <div class="inner two"></div>
                <div class="inner three"></div>
            </div>
        }
        else if (AppState.StoredEvents != null && AppState.StoredEvents.Count > 0)
        {
            <div class="mask-text-over-img">
                @if (AppState.FutureEvents.Any())
                {
                    <h2>Upcoming events:</h2>
                    <div class="row event-card-container">
                        @foreach (var evt in AppState.FutureEvents)
                        {
                            <div @onclick="() => GoEvent(evt)" class="col-md-6">
                                <EventCard Evt="@evt" />
                            </div>
                        }
                    </div>
                }
                @if (AppState.PastEvents.Any())
                {
                    <h2>Past events:</h2>
                    <div class="row event-card-container">
                        @foreach (var evt in AppState.PastEvents)
                        {
                            <div @onclick="() => GoEvent(evt)" class="col-md-6">
                                <EventCard Evt="@evt" />
                            </div>
                        }
                    </div>
                }
            </div>
        }
        else
        {
            <div class="mask-text-over-img">
                <div class="row">
                    <div class="col-md-6">
                        <div class="d-flex justify-content-center">
                            <div class="d-none d-md-block" style="margin-top: 50px;">
                                <h2>Do Things Together</h2>
                            </div>
                            <div class="d-block d-md-none" style="">
                                <h2>Do Things Together</h2>
                            </div>
                        </div>
                        <div class="d-flex justify-content-center">Have new experience with your friends and meet new people</div>
                        <div class="d-flex justify-content-center">
                            <a href="/create" class="btn btn-main"><span class="oi oi-plus" style="font-size:16px;" />&nbsp;&nbsp;&nbsp;Create one</a>
                        </div>
                    </div>
                    <div class="col-md-6 shadow-1-strong">
                        <Intro_right />
                    </div>
                </div>
            </div>
        }

    </Authorized>
</AuthorizeView>

@code {
    void NavigateToRegistration() => Nav.NavigateTo($"Identity/Account/Register?participation={AppState.LatestParticipation?.Id}", forceLoad: true);
    void NavigateToLogin() => Nav.NavigateTo($"Identity/Account/Login?participation={AppState.LatestParticipation?.Id}", forceLoad: true);
    bool IsAdmin() => AppState.User.Claims.Any(o => o.Value == "algarud@gmail.com");
    bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        await EventService.LoadUpcoming();
        loading = false;
    }

    void GoEvent(EventVM e)
    {
        Nav.NavigateTo($"/event/{e.Id}");
    }

    void GoToInvite()
    {
        Nav.NavigateTo($"{Nav.BaseUri}i/{AppState.Invite.InviteCode}");
    }


    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}
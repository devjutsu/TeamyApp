@page "/i/{InviteCode}"
@using Microsoft.AspNetCore.Authorization
@inject AppState AppState
@inject IManageEvents EventService
@inject IHttpClientFactory HttpClientFactory
@inject IToastService toastService
@implements IDisposable

@if (CurrentEvent != null)
{
    @if (@CurrentEvent.ImageUrl != null)
    {
        <div class="img-viewblock d-none d-sm-block" style="background-image:  linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0), #121212FF), url(@CurrentEvent.ImageUrl);"></div>
        <div class="img-xs-viewblock d-block d-sm-none" style="background-image:  linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0), #121212FF), url(@CurrentEvent.ImageUrl);"></div>
    }
    else
    {
        <div class="noimg-viewblock d-none d-sm-block"></div>
        <div class="noimg-xs-viewblock d-block d-sm-none"></div>
    }
    @if (!string.IsNullOrEmpty(@CurrentEvent.ImageUrl))
    {
        <div class="" style="height:50px;"></div>
    }
    <div class="event-titleblock">
        <div class="">
            <div class="event-title">@CurrentEvent.Title</div>
            <div class="event-details">@CurrentEvent.Description</div>
        </div>
    </div>

    <div class="row" style="margin-bottom:1rem;">

        <div class="col-md-6">
            <div class="default-block">
                <h4>Date and time</h4>
                @if (@CurrentEvent.DateStatus == EventDateStatus.Locked)
                {
                    <div class="row" style="margin-top: .6rem;">
                        <div class="col-12 col-sm-10 col-md-12 col-lg-10 col-xl-8 dateview-container">
                            <div class="d-inline dateview-date">
                                @CurrentEvent.EventDate.Value.ToString("ddd, dd MMM"): @CurrentEvent.EventDate.Value.ToString("HH:mm") - @CurrentEvent.EventDateTo.Value.ToString("HH:mm")
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="bold">Date selection:</div>
                    @foreach (var date in CurrentEvent.ProposedDates)
                    {
                        <div class="row" style="margin-top: .6rem;">

                            <div class="col-12 col-sm-10 col-md-12 col-lg-10 col-xl-8">
                                <div class="datevote-progress d-flex" @onclick=ToastCanNotVote >
                                    <div class="datevote-element d-flex">
                                        <div class="check-container" style="position:relative; margin-left: .5rem;">
                                            <input type="checkbox" style="margin-top:.8rem; " />
                                            <span class="checkmark" />
                                        </div>


                                        <div class="d-flex flex-nowrap justify-content-between" style="width:100%; margin-right: 1rem; ">
                                            <div style="padding:.8rem 0 .8rem 0;">
                                                @date.Date.ToString("ddd, dd MMM")
                                            </div>
                                            <div style="padding:.8rem 0 .8rem 0;">
                                                @date.Date.ToString("HH:mm") - @date.DateTo.ToString("HH:mm")
                                            </div>
                                        </div>

                                    </div>
                                </div>

                            </div>
                            @if (UserCanModifyEvent())
                            {
                                <div class="datevote-lock col-12 col-sm-2 col-lg-2 col-xl-4">
                                    <button class="btn btn-sm btn-outline-secondary datevote-lock-btn"><span class="oi oi-lock-unlocked" /></button>
                                </div>
                            }
                        </div>
                    }
                }
            </div>

            <div class="default-block">
                <h4>Location: </h4>
                <div>@CurrentEvent.Where</div>
            </div>
        </div>

        <div class="col-md-6 d-none d-sm-block">
            <AuthorizeView>
                <Authorized>
                    <EventRespond CurrentEvent=@CurrentEvent UserId=@AppState.UserId NavigateTo=@GoToEvent />
                </Authorized>
                <NotAuthorized>
                    <EventRespondAnon CurrentEvent=@CurrentEvent InviteCode=@InviteCode Responded=@OnResponded LatestParticipation=@AppState.LatestParticipation />
                </NotAuthorized>
            </AuthorizeView>
        </div>

        @if (CurrentEvent.Polls != null)
        {
            <div style="margin-left: 1rem; margin-top: 2rem;">
                <h4>Event has polls:</h4>
                <div>Registered participants can vote</div>
            </div>
            @foreach (var poll in CurrentEvent.Polls)
            {
                <div class="col-md-6">

                    <div class="default-block">
                        <div class="d-flex justify-content-between">
                            <h4>Poll</h4>
                        </div>

                        <div class="bold">@poll.Question</div>

                        @foreach (var choice in poll.Choices)
                        {
                            <div class="d-flex poll-main" @onclick=ToastCanNotVote>
                                @if (poll.MultiChoice)
                                {
                                    <div class="check-container" >
                                        <input type="checkbox" style="margin-top:.7rem;" />
                                        <span class="checkmark"  />
                                    </div>
                                }
                                else
                                {
                                    <div class="radio-container">
                                        <input class="" type="radio" name=@poll.Question style="margin-top:.7rem;" />
                                        <span class="radiomark" />
                                    </div>
                                }

                                <div class="poll-choice-container">
                                    <div class="poll-choice">@choice.Choice</div>
                                    <div class="progress">
                                        <div class="progress-bar" role="progressbar" style="width: @Percent(poll, choice)%;" aria-valuenow="@Percent(poll, choice)" aria-valuemin="0" aria-valuemax="100">
                                        </div>
                                    </div>
                                </div>
                                <div class="poll-percent">
                                    @if (ChoiceTotalVotes(choice) > 0)
                                    {
                                        <span>@Percent(poll, choice)% (@ChoiceTotalVotes(choice))</span>
                                    }
                                </div>
                            </div>
                        }
                        
                    </div>
                </div>
            }
        }

        <div class="col-md-6 d-block d-sm-none">
            <AuthorizeView>
                <Authorized>
                    <EventRespond CurrentEvent=@CurrentEvent UserId=@AppState.UserId NavigateTo=@GoToEvent />
                </Authorized>
                <NotAuthorized>
                    <EventRespondAnon CurrentEvent=@CurrentEvent InviteCode=@InviteCode Responded=@OnResponded LatestParticipation=@AppState.LatestParticipation />
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
}

@code {
    [Parameter]
    public string InviteCode { get; set; }

    EventVM CurrentEvent { get; set; }
    private ToastParameters _toastParameters;



    bool UserCanModifyEvent()
        => (CurrentEvent.CreatedById == AppState.UserId);

    protected override async Task OnInitializedAsync()
    {
        CurrentEvent = await EventService.Invited(InviteCode);
        Console.WriteLine($"init: {CurrentEvent.ProposedDates.Count()}");
    }

    int Percent(PollVM poll, PollChoiceVM choice)
    {
        var totalVotes = PollTotalVotes(poll);
        return totalVotes > 0
                ? ChoiceTotalVotes(choice) * (100 / totalVotes)
                : 0;
    }

    int PollTotalVotes(PollVM poll)
        => poll.Choices.Sum(o => o.Answers?.Count()) ?? 0;

    int ChoiceTotalVotes(PollChoiceVM choice)
        => choice.Answers?.Count() ?? 0;

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void OnResponded(ParticipationVM participation)
    {
        Console.WriteLine($"Responded: {participation.InviteCode} {participation.Name} {participation.Status.ToString()}");
        AppState.SetParticipation(this, participation);
    }

    void GoToEvent()
    {
        Nav.NavigateTo($"/event/{CurrentEvent.Id}");
    }

    void ToastCanNotVote()
    {
        RenderFragment message =
            @<text>Please, <strong>Participate</strong> and <strong>Login</strong> to Vote</text>
            ;
        toastService.ShowToast(ToastLevel.Warning, message);
    }
}

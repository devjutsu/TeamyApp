@page "/i/{InviteCode}"
@using Microsoft.AspNetCore.Authorization
@inject AppState AppState
@inject IManageEvents EventService
@inject IHttpClientFactory HttpClientFactory
@implements IDisposable

@if (CurrentEvent != null)
{
    <div class="d-flex justify-content-between">
        <div>
            <h4>@CurrentEvent.Title</h4>
            @if (@CurrentEvent.DateStatus == EventDateStatus.Locked || @CurrentEvent.ProposedDates.Count == 1)
            {
                <div>@CurrentEvent.EventDate.Value.ToLongDateString()</div>
            }
            else
            {
                <div style="margin:1rem 0 1rem 0; border: 1px dotted black; max-width: 30rem;">
                    <div style="font-weight:bold;">Date choice:</div>
                    @foreach (var date in CurrentEvent.ProposedDates)
                    {
                        <div>@date.Date.ToLongDateString()</div>
                    }
                </div>
            }
            <div style="margin:1rem 0 1rem 0; border: 1px dotted black; max-width: 30rem;">
                <div style="font-weight:bold;">Details:</div>
                <div>@CurrentEvent.Description</div>
            </div>

            <div style="margin:1rem 0 1rem 0; border: 1px dotted black; max-width: 30rem;">
                <div style="font-weight:bold;">Location:</div>
                <div>@CurrentEvent.Where</div>
            </div>
        </div>
        <div><img src=@CurrentEvent.ImageUrl width="400" /></div>
    </div>

    <AuthorizeView>
        <Authorized>
            <EventRespond CurrentEvent=@CurrentEvent UserId=@AppState.UserId NavigateTo=@GoToEvent />
        </Authorized>
        <NotAuthorized>
            <EventRespondAnon CurrentEvent=@CurrentEvent InviteCode=@InviteCode Responded=@OnResponded LatestParticipation=@AppState.LatestParticipation />
        </NotAuthorized>
    </AuthorizeView>


}

@code {
    [Parameter]
    public string InviteCode { get; set; }

    EventVM CurrentEvent { get; set; }

    bool UserCanModifyEvent()
        => (CurrentEvent.CreatedById == AppState.UserId);

    protected override async Task OnInitializedAsync()
    {
        CurrentEvent = await EventService.Invited(InviteCode);
        Console.WriteLine($"init: {CurrentEvent.ProposedDates.Count()}");
    }

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void OnResponded(ParticipationVM participation)
    {
        Console.WriteLine($"Responded: {participation.InviteCode} {participation.Name} {participation.Status.ToString()}");
        AppState.SetParticipation(this, participation);
    }

    void GoToEvent()
    {
        Nav.NavigateTo($"/event/{CurrentEvent.Id}");
    }
}

@page "/qm"
@inject IManageQuiz QuizService
@inject IJSRuntime JS
@inject IToastService Toast

<AuthorizeView>
    <Authorized>
        <div class="quiz-manage-main" style="">
            @if (MyQuizes == null)
            {
                <div>No quizes</div>
            }
            else
            {
                <table class="table table-dark table-hover" style="border-collapse: separate;">
                    <thead>
                        <tr>
                            <th scope="col">Quiz</th>
                            <th scope="col">Details</th>
                            <th scope="col">Fills</th>
                        </tr>
                    </thead>
                    @foreach (var quiz in MyQuizes)
                    {
                        <tr>
                            <td>
                                <button class="btn btn-secondary" style="width:100%; padding: 1rem;" @onclick="(() => SelectQuiz(quiz))">@quiz.Title</button>
                            </td>
                            <td>
                                @quiz.Details
                            </td>
                            <td>
                            </td>
                        </tr>
                    }
                </table>

                @if (SelectedQuiz != null)
                {
                    <h3>@SelectedQuiz.Title</h3>
                    <div>@SelectedQuiz.Details</div>
                    <button class="btn btn-main" @onclick="GenerateQCode" style="margin-bottom:1rem;">Generate QCode</button>

                    <table class="table table-dark">
                        <colgroup>
                            <col span="1" style="width: 10px;">
                            <col span="1" style="width: 40px;">
                            <col span="1" style="width: 10%;">
                            <col span="1" style="">
                            <col span="1" style="width: 80px;">
                            @*<col span="1" style="width: 20px;">*@
                        </colgroup>

                        @foreach (var qcode in SelectedQuiz.QCodes.OrderBy(o => o.DateCreated).Select((obj, i) => new { obj, i = i + 1 }).OrderByDescending(z => z.i))
                        {
                            <tr>
                                <td>@qcode.i</td>
                                <td><a class="qcode-manage-link" @onclick="(() => CopyLink(qcode.obj))">@qcode.obj.Id</a></td>
                                <td><input type="text" class="qm-edit" value="@qcode.obj.Url" @onchange="((e) => UpdateUrl(qcode.obj, e))" /></td>
                                <td><input type="text" class="qm-edit @QuizCss(qcode.obj)" value="@qcode.obj.Comment" @onchange="((e) => UpdateComments(qcode.obj, e))" /></td>
                                <td style="text-align:center;"><a @onclick="@(() => ShowAnswers(qcode.obj))">@VisitedSubmittedCounts(qcode.obj) : @qcode.obj.TotalAnswers</a></td>
                                @*<td style="text-align:center;"></td>*@
                            </tr>
                        }
                    </table>
                }
            }
            <p>&nbsp;</p>
        </div>

        @if (QuizAnswered != null && QuizAnswered.Count > 0)
        {
            <p id="quizanswers">&nbsp;</p>
            <div></div>
            <p>&nbsp;</p>
            @foreach(var question in QuizAnswered)
            {
                @if(question.Answers.Count > 0)
                {
                    <div class="qm-question">@question.Question</div>

                    @foreach(var ans in question.Answers)
                    {
                        <div class="qm-answer">@ans.Answer</div>
                    }
                }
            }
            <p>&nbsp;</p>
        }

    </Authorized>
    <NotAuthorized>
        <div>This section is for authorized users only</div>
    </NotAuthorized>
</AuthorizeView>



@code {
    List<QuizVM> MyQuizes { get; set; }
    QuizVM? SelectedQuiz { get; set; }
    List<QuizQuestionVM>? QuizAnswered { get; set; }
    string scrollToElement { get; set; } = "";

    string VisitedSubmittedCounts(QuizCodeVM qcode) => $"{@qcode.Visited} : {@qcode.Submitted}";

    string QuizCss(QuizCodeVM qcode)
        => qcode.Submitted > 0
                ? "qm-edit-submitted"
                : qcode.Visited > 0 ? "qm-edit-notsubmitted" : "";

    protected override async Task OnInitializedAsync()
    {
        MyQuizes = await QuizService.ManageList();
    }

    void SelectQuiz(QuizVM quiz)
    {
        SelectedQuiz = quiz;
        FillTotalAnswers();
    }

    async Task CopyLink(QuizCodeVM code)
    {
        var url = Nav.BaseUri + $"q/{code.Id.ToString()}";
        await JS.InvokeVoidAsync("clipboardCopy.copyText", $"{url}");
        Toast.ShowInfo("Link copied");
    }

    async Task GenerateQCode()
    {
        var quiz = await QuizService.GenerateQCode(SelectedQuiz.Id);
        var i = MyQuizes.IndexOf(SelectedQuiz);
        MyQuizes[i] = quiz;
        SelectedQuiz = quiz;
        FillTotalAnswers();
    }

    async Task UpdateComments(QuizCodeVM code, ChangeEventArgs e)
    {
        code.Comment = e.Value.ToString();
        await QuizService.UpdateQCodeInfo(code);
    }

    async Task UpdateUrl(QuizCodeVM code, ChangeEventArgs e)
    {
        code.Url = e.Value.ToString();
        await QuizService.UpdateQCodeInfo(code);
    }

    async Task ShowAnswers(QuizCodeVM code)
    {
        QuizAnswered = await QuizService.GetAnswers(code.Id);
        scrollToElement = "quizanswers";
    }

    async Task FillTotalAnswers()
    {
        foreach(var q in SelectedQuiz.QCodes.OrderByDescending(c => c.DateCreated))
        {
            q.TotalAnswers = await QuizService.TotalAnswers(q.Id);
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && !string.IsNullOrEmpty(scrollToElement))
        {
            await JS.InvokeVoidAsync("scrollTo", scrollToElement);
            scrollToElement = "";
        }
    }
}

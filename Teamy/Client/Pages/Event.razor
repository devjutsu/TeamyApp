@page "/event/{Id:guid}"
@inject AppState AppState
@inject IManageEvents EventService
@implements IDisposable
@using Microsoft.AspNetCore.SignalR.Client

@if (CurrentEvent != null)
{
    @if (Editing)
    {
        <button class="btn btn-link" @onclick="() => GoBack()">Back</button>
        <EventEdit InitialEvent=@EditingEvent DoneEditing=@Finished></EventEdit>
    }
    else
    {
        <EventView CurrentEvent=@CurrentEvent />

        @if (UserCanModifyEvent())
        {
            <div>
                <button class="btn btn-warning" @onclick="() => EditEvent()">Edit</button>
                <button class="btn btn-danger" @onclick="() => DeleteEvent()">Delete</button>
                <p>&nbsp;</p>
            </div>
        }

    }
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter]
    public Guid Id { get; set; }
    EventVM CurrentEvent { get; set; }
    EventVM EditingEvent { get; set; }
    bool Editing { get; set; } = false;
    HubConnection _hub;

    protected override async Task OnInitializedAsync()
    {
        CurrentEvent = AppState.StoredEvents?.SingleOrDefault(o => o.Id == Id)
                    ?? await EventService.Get(Id);

        _hub = new HubConnectionBuilder()
                    .WithUrl(Nav.BaseUri + "votehub")
                    .WithAutomaticReconnect()
                    .Build();
        await _hub.StartAsync();

        Console.WriteLine($"started hub for {CurrentEvent.Id}");
        _hub.On<Guid>("EventUpdated", async (changedEventId) =>
        {
            Console.WriteLine("***===event updated===***");
            if (changedEventId == CurrentEvent.Id)
            {
                CurrentEvent = await EventService.Get(CurrentEvent.Id.Value);
                StateHasChanged();
            }
        });

        _hub.On<Guid>("EventDeleted", async (changedEventId) =>
        {
            Console.WriteLine("---===event deleted===---");
            if (changedEventId == CurrentEvent.Id)
            {
                var options = new ModalOptions() { Class = "default-modal" };
                var parameters = new ModalParameters();
                parameters.Add("Message", "This event was deleted!");
                var messageModal = Modal.Show<NotifyModal>("Information", parameters, options);
                var result = await messageModal.Result;
                Nav.NavigateTo("");
            }
        });
    }

    bool UserCanModifyEvent()
        => (CurrentEvent.CreatedById == AppState.UserId);

    async Task EditEvent()
    {
        Editing = true;
        EditingEvent = (EventVM)CurrentEvent.Clone();
    }

    async Task DeleteEvent()
    {
        var modal = Modal.Show<ConfirmModal>("Are you sure you want to delete this event?", new ModalOptions { Class = "default-modal" });
        var result = await modal.Result;

        if (!result.Cancelled)
        {
            await EventService.Delete(CurrentEvent.Id.Value);
            Nav.NavigateTo("/");
        }
    }

    async Task Finished(EventVM editedVM)
    {
        Console.WriteLine($"{editedVM.ProposedDates.Count} - {CurrentEvent.ProposedDates.Count}");
        await EventService.Update(editedVM);
        CurrentEvent = editedVM;
        Editing = false;
    }

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void GoBack()
    {
        Console.WriteLine($"{EditingEvent.ProposedDates.Count} - {CurrentEvent.ProposedDates.Count}");
        Editing = false;
    }
}

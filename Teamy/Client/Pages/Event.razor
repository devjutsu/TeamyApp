@page "/event/{Id:guid}"
@inject AppState AppState
@inject IManageEvents EventService
@implements IDisposable
@using Microsoft.AspNetCore.SignalR.Client

<AuthorizeView>
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        @if (CurrentEvent != null)
        {
            @if (Editing)
            {
                <button class="btn btn-link" @onclick="() => GoBack()">Back</button>
                <EventEdit InitialEvent=@EditingEvent DoneEditing=@Finished></EventEdit>
            }
            else
            {
                <EventView CurrentEvent=@CurrentEvent SwitchToEdit=@EditEvent />
            }
        }
    </Authorized>
</AuthorizeView>
<p>&nbsp;</p>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter]
    public Guid Id { get; set; }
    EventVM CurrentEvent { get; set; }
    EventVM EditingEvent { get; set; }
    bool Editing { get; set; } = false;
    HubConnection _hub;

    protected override async Task OnInitializedAsync()
    {
        CurrentEvent = AppState.StoredEvents?.SingleOrDefault(o => o.Id == Id)
                    ?? await EventService.Get(Id);

        _hub = new HubConnectionBuilder()
                    .WithUrl(Nav.BaseUri + "votehub")
                    .WithAutomaticReconnect()
                    .Build();
        await _hub.StartAsync();

        _hub.On<Guid>("EventUpdated", async (changedEventId) =>
        {
            if (changedEventId == CurrentEvent.Id)
            {
                CurrentEvent = await EventService.Get(CurrentEvent.Id.Value);
                StateHasChanged();
            }
        });

        _hub.On<Guid>("EventDeleted", async (changedEventId) =>
        {
            if (changedEventId == CurrentEvent.Id)
            {
                var options = new ModalOptions { Class = "default-modal", UseCustomLayout = true };
                var parameters = new ModalParameters();
                parameters.Add("Message", "This event was deleted!");
                var messageModal = Modal.Show<NotifyModal>("Information", parameters, options);
                var result = await messageModal.Result;
                Nav.NavigateTo("");
            }
        });
    }

    bool UserCanModifyEvent()
        => (CurrentEvent.CreatedById == AppState.UserId);

    async Task EditEvent()
    {
        Editing = true;
        EditingEvent = (EventVM)CurrentEvent.Clone();
    }

    async Task Finished(EventVM editedVM)
    {
        if (editedVM.ProposedDates != null)
        {
            if (editedVM.ProposedDates.Count == 1)
            {
                editedVM.EventDate = editedVM.ProposedDates.First()?.Date;
                editedVM.EventDateTo = editedVM.ProposedDates.First()?.DateTo;
                editedVM.DateStatus = EventDateStatus.Locked;
            }
        }
        await EventService.Update(editedVM);
        CurrentEvent = editedVM;
        Editing = false;
    }

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    void GoBack()
    {
        Console.WriteLine($"{EditingEvent.ProposedDates.Count} - {CurrentEvent.ProposedDates.Count}");
        Editing = false;
    }
}

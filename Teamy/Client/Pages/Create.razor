@page "/create/{TemplateCode:guid}"
@page "/create"
@using Blazored.Modal.Services
@inject AppState AppState
@inject IJSRuntime JS
@inject IManageEvents EventService
@inject IManageTemplates TemplateService
@implements IDisposable

<style>
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        opacity: 1;
    }
</style>

<div class="container container-black">
    @*container-inner-padding*@
    @if (EditingEvent == null)
    {
        <div class="mask-text-no-img">
            <div class="row event-card-container">
                <h2>Create new event</h2>
                @if (Recommended != null)
                {
                    <div class="event-card-clickarea col-sm-12 col-md-6 col-lg-4 col-xl-3" @onclick="(() => DoCreateNew())">
                        <div class="event-card">
                            <div class="event-card-img" style="background-image: url(https://squalldiag.blob.core.windows.net/template-img/fromscratch.jpeg);"></div>

                            <div class="event-card-data">
                                <div class="event-card-title">From scratch</div>
                            </div>
                        </div>
                    </div>

                    @foreach (var item in Recommended)
                    {
                        <div class="event-card-clickarea col-sm-12 col-md-6 col-lg-4 col-xl-3" @onclick="(() => DoCreateFromTemplate(item))">
                            <div class="event-card">
                                <div class="event-card-img" style="background-image: url(@item.ImageUrl);"></div>

                                <div class="event-card-data">
                                    <div class="event-card-title">@item.Title</div>
                                    <div class="event-car-details" style="overflow: hidden;">@item.Description</div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
            <p>&nbsp;</p>
        </div>
    }
    else
    {
        <button class="btn btn-back d-none d-sm-block" @onclick="() => GoBack()">
            <span class="oi oi-arrow-left" />
            &nbsp;Back
        </button>
        <button class="btn btn-xs-back d-block d-sm-none" @onclick="() => GoBack()">
            <span class="oi oi-arrow-left" />
            &nbsp;Back
        </button>
        <EventEdit InitialEvent=@EditingEvent DoneEditing=@CreateFinished></EventEdit>
    }
</div>
<div class="container-spacer"></div>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }
    [Parameter]
    public Guid? TemplateCode { get; set; }

    ElementReference titleRef { get; set; }

    List<EventVM>? Recommended { get; set; }

    EventVM? EditingEvent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Recommended = await TemplateService.Recommended();

        if (TemplateCode != null)
        {
            if (TemplateCode == Guid.Empty)
            {
                DoCreateNew();
            }
            else
            {
                EditingEvent = await TemplateService.Get(TemplateCode.Value);
            }
        }
    }

    public async Task DoCreateFromTemplate(EventVM tpl)
    {
        EditingEvent = tpl;
    }

    public async Task DoCreateNew()
    {
        EditingEvent = new EventVM();
        EditingEvent.EventDate = null;
        EditingEvent.EventDateTo = null;
        EditingEvent.ProposedDates = new List<ProposedDateVM>() {
            new ProposedDateVM() {Date = DateTime.Today.AddDays(1).AddHours(18),
                DateTo = DateTime.Today.AddDays(1).AddHours(20)},
            new ProposedDateVM() {Date = DateTime.Today.AddDays(2).AddHours(18),
                DateTo = DateTime.Today.AddDays(1).AddHours(20)},
        };
    }

    async Task CreateFinished(EventVM editedVM)
    {
        if (editedVM.ProposedDates != null && editedVM.ProposedDates.Count == 1)
        {
            editedVM.EventDate = editedVM.ProposedDates.First()?.Date;
            editedVM.EventDateTo = editedVM.ProposedDates.First()?.DateTo;
            editedVM.DateStatus = EventDateStatus.Locked;
        }

        editedVM.CreatedById = AppState.UserId ?? await JS.InvokeAsync<string>("ReadCookie.ReadCookie", "userId");
        var createdEventVM = await EventService.Create(editedVM);

        if (!AppState.IsLoggedIn)
        {
            await JS.InvokeAsync<object>("WriteCookie.WriteCookie", "userId", createdEventVM.UserId, DateTime.Now.AddYears(1));
        }
        Nav.NavigateTo($"/event/{createdEventVM.EventId}");
    }

    void GoBack()
    {
        EditingEvent = null;
    }

    protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}



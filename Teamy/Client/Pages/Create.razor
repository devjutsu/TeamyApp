@page "/create"
@using Blazored.Modal.Services
@inject IJSRuntime JS
@inject IManageEvents EventService
@inject IManageTemplates TemplateService

@if (EditingEvent == null)
{
    <h3>Create new event</h3>
    <h4>Call your friends to ...</h4>
    <p></p>
    <h5>(select template)</h5>
    <div class="d-flex flex-wrap">
        @if (Recommended != null)
        {
            @foreach (var item in Recommended)
            {
                <div class="d-flex" @onclick="(() => DoCreateFromTemplate(item))" style="border:1px dashed black; margin:1rem 1rem 0 0; padding: .5rem; width:33rem; height:7rem;">
                    <div><img src=@item.ImageUrl width="150" style="margin:0 1rem 0 0;" /></div>
                    <div>
                        <div style="font-weight:bold;">@item.Title</div>
                        <div>@item.Description</div>
                    </div>
                </div>
            }

            <div class="d-flex" @onclick="(() => DoCreateNew())" style="border:1px dashed black; margin:1rem 1rem 0 0; padding: .5rem; width:33rem; height:7rem;">
                <div><img src="https://miro.medium.com/max/1200/1*deNLDT12xC4buYqv0r7ZCg.jpeg" width="150" style="margin:0 1rem 0 0;" /></div>
                <div>
                    <div style="font-weight:bold;">Custom event</div>
                </div>
            </div>
        }
    </div>
    <p>&nbsp;</p>
}
else
{
    <button class="btn btn-link" @onclick="() => GoBack()">Back</button>
    <EventEdit InitialEvent=@EditingEvent DoneEditing=@Finished></EventEdit>
}

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    ElementReference titleRef { get; set; }

    List<EventVM> Recommended { get; set; }

    EventVM EditingEvent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Recommended = await TemplateService.Recommended();
        //await JS.InvokeVoidAsync("showAlert", "test alert from js");
    }

    public async Task DoCreateFromTemplate(EventVM tpl)
    {
        EditingEvent = tpl;
    }

    public async Task DoCreateNew()
    {
        EditingEvent = new EventVM();
        EditingEvent.EventDate = null;
        EditingEvent.ProposedDates = new List<ProposedDateVM>() {new ProposedDateVM() {Date = DateTime.Today.AddDays(1) }};
    }

    async Task Finished(EventVM editedVM)
    {
        if(editedVM.ProposedDates != null && editedVM.ProposedDates.Count == 1)
        {
            editedVM.EventDate = editedVM.ProposedDates.First()?.Date;
            editedVM.DateStatus = EventDateStatus.Locked;
        }
        var createdId = await EventService.Create(editedVM);
        Nav.NavigateTo($"/event/{Guid.Parse(createdId)}");
    }

    void GoBack()
    {
        EditingEvent = null;
    }
}



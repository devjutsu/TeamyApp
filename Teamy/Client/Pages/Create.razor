@page "/create"
@using Blazored.Modal.Services
@inject AppState AppState
@inject IJSRuntime JS
@inject IManageEvents EventService
@inject IManageTemplates TemplateService
@implements IDisposable

@if (EditingEvent == null)
{
    <h2>Create new event</h2>
    <div>Or select and customize template</div>
    <div class="d-flex flex-wrap">
        @if (Recommended != null)
        {
            <div class="row event-card-container">
                <div class="col-md-4">
                    <div class="d-flex template-card" @onclick="(() => DoCreateNew())">
                        <div class="event-card-img event-card-data">
                            <div style="font-weight:bold;">From scratch</div>
                        </div>
                        <div class="event-card-img" style="background-image: url(https://miro.medium.com/max/1200/1*deNLDT12xC4buYqv0r7ZCg.jpeg);"></div>
                    </div>
                </div>

                @foreach (var item in Recommended)
                {
                    <div class="col-md-4">
                        <div class="d-flex template-card" @onclick="(() => DoCreateFromTemplate(item))">
                            <div class="event-card-img event-card-data">
                                <div style="font-weight:bold;">@item.Title</div>
                                <div>@item.Description</div>
                            </div>
                            <div class="event-card-img" style="background-image: url(@item.ImageUrl);"></div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
    <p>&nbsp;</p>
}
else
{
    <button class="btn btn-back d-none d-sm-block" @onclick="() => GoBack()">
        <span class="oi oi-arrow-left" />
        &nbsp;Back
    </button>
    <button class="btn btn-xs-back d-block d-sm-none" @onclick="() => GoBack()">
        <span class="oi oi-arrow-left" />
        &nbsp;Back
    </button>
    <EventEdit InitialEvent=@EditingEvent DoneEditing=@CreateFinished></EventEdit>
}

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    ElementReference titleRef { get; set; }

    List<EventVM> Recommended { get; set; }

    EventVM EditingEvent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Recommended = await TemplateService.Recommended();
        //await JS.InvokeVoidAsync("showAlert", "test alert from js");
    }

    public async Task DoCreateFromTemplate(EventVM tpl)
    {
        EditingEvent = tpl;
    }

    public async Task DoCreateNew()
    {
        EditingEvent = new EventVM();
        EditingEvent.EventDate = null;
        EditingEvent.EventDateTo = null;
        EditingEvent.ProposedDates = new List<ProposedDateVM>() {
            new ProposedDateVM() {Date = DateTime.Today.AddDays(1).AddHours(18),
                DateTo = DateTime.Today.AddDays(1).AddHours(20)},
            new ProposedDateVM() {Date = DateTime.Today.AddDays(2).AddHours(18),
                DateTo = DateTime.Today.AddDays(1).AddHours(20)},
        };
    }

    async Task CreateFinished(EventVM editedVM)
    {
        if (editedVM.ProposedDates != null && editedVM.ProposedDates.Count == 1)
        {
            editedVM.EventDate = editedVM.ProposedDates.First()?.Date;
            editedVM.EventDateTo = editedVM.ProposedDates.First()?.DateTo;
            editedVM.DateStatus = EventDateStatus.Locked;
        }
        var createdEventVM = await EventService.Create(editedVM);

        if(!AppState.IsLoggedIn)
        {
            await JS.InvokeAsync<object>("WriteCookie.WriteCookie", "userId", createdEventVM.UserId, DateTime.Now.AddYears(1));
        }
        Nav.NavigateTo($"/event/{createdEventVM.EventId}");
    }

    void GoBack()
    {
        EditingEvent = null;
    }

     protected override void OnInitialized()
    {
        AppState.Statechanged += async (Source, Property) => await AppState_StateChanged(Source, Property);
    }

    private async Task AppState_StateChanged(ComponentBase source, string Property)
    {
        if (source != this) await InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        AppState.Statechanged -= async (Source, Property) => await AppState_StateChanged(Source, Property);
    }
}



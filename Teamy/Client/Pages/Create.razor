@page "/create"
@inject IJSRuntime JS
@inject IManageEvents EventService
@using Blazored.Modal.Services

@inject IManageTemplates TemplateService
<h3>Create new event</h3>
<h4>Call your friends to ...</h4>
<p></p>
<h5>(select template)</h5>
<div class="d-flex flex-wrap">
    @if (Recommended != null)
    {
        @foreach (var item in Recommended)
        {
            <div class="d-flex" @onclick="(() => GoTemplate(item))" style="border:1px dashed black; margin:1rem 1rem 0 0; padding: .5rem; width:33rem; height:7rem;">
                <div><img src=@item.ImageUrl width="150" style="margin:0 1rem 0 0;" /></div>
                <div>
                    <div style="font-weight:bold;">@item.Title</div>
                    <div>@item.Description</div>
                </div>
            </div>
        }

        <div class="d-flex" @onclick="(() => GoNew())" style="border:1px dashed black; margin:1rem 1rem 0 0; padding: .5rem; width:33rem; height:7rem;">
            <div><img src="https://miro.medium.com/max/1200/1*deNLDT12xC4buYqv0r7ZCg.jpeg" width="150" style="margin:0 1rem 0 0;" /></div>
            <div>
                <div style="font-weight:bold;">Custom event</div>
            </div>
        </div>
    }
</div>
<p>&nbsp;</p>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }

    ElementReference titleRef { get; set; }

    List<EventVM> Recommended { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Recommended = await TemplateService.Recommended();
        //await JS.InvokeVoidAsync("showAlert", "test alert from js");
    }

    public async Task GoTemplate(EventVM tpl)
    {
        var options = new ModalOptions() { Class = "event-edit-modal" };
        var parameters = new ModalParameters();
        parameters.Add("Evt", tpl);
        parameters.Add("Message", "Creating event from template");

        var messageModal = Modal.Show<EventEditModal>("Create event", parameters, options);
        var modalResult = await messageModal.Result;

        if(!modalResult.Cancelled)
        {
            var evt = (EventVM)modalResult.Data;
            var result = await EventService.Create(evt);
            if (!string.IsNullOrEmpty(result))
                Nav.NavigateTo($"/event/{result}");
        }
    }

    public void GoNew()
    {
        var options = new ModalOptions() { Class = "event-edit-modal" };
        var parameters = new ModalParameters();
        parameters.Add("Evt", new EventVM());
        parameters.Add("Message", "Creating event from template");

        var messageModal = Modal.Show<EventEditModal>("Create event", parameters, options);
    }
}



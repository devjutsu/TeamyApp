<style>
    .notification-text {
        margin-bottom: 1rem;
    }

    .confirm-btn {
        margin: .5rem;
    }
</style>

<div @onkeydown="(e => KeyPressed(e))">
    <div class="notification-text">@Message</div>

    <div>From:</div>
    <div class="d-flex justify-content-between">
        <input type="date" @bind=@DateTimeFrom @bind:format="yyyy-MM-dd" class="form-control" style="max-width:10rem;">
        <input @bind=@TimeFrom @bind:format="HH:mm" class="form-control" style="max-width:5rem;">
    </div>
    
    <div class="d-flex justify-content-between">Till: <input @bind=@DateTimeTo @bind:format="HH:mm" class="form-control" style="max-width:5rem;"></div>

    <div class="d-flex justify-content-center">
        <button @onclick="Close" class="btn btn-primary confirm-btn">Ok</button>
    </div>
</div>

@code {
    [CascadingParameter] 
    BlazoredModalInstance BlazoredModal { get; set; }
    [Parameter] 
    public string Message { get; set; }
    [Parameter]
    public DateTime DateTimeFrom { get; set; }
    public DateTime TimeFrom { get; set; }
    [Parameter]
    public DateTime DateTimeTo { get; set; }

    async Task Cancel() => await BlazoredModal.CancelAsync();

    protected override void OnInitialized()
    {
        TimeFrom = DateTime.Today.AddHours(DateTimeFrom.Hour).AddMinutes(DateTimeFrom.Minute);
    }

    async Task KeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
            await Cancel();
    }

    async Task Close()
    {
        var realDateFrom = DateTimeFrom.Date.AddHours(TimeFrom.Hour).AddMinutes(TimeFrom.Minute);
        var proposed = new ProposedDateVM() { Date = realDateFrom, DateTo = DateTimeTo };
        await BlazoredModal.CloseAsync(ModalResult.Ok(proposed));
    }
}
